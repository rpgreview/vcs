// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "ADMPnew.h"

Fl_Double_Window *a_Exit=(Fl_Double_Window *)0;

Fl_Button *a_EBExit=(Fl_Button *)0;

Fl_Button *a_EBCancel=(Fl_Button *)0;

Fl_Button *a_EBSaveExit=(Fl_Button *)0;

Fl_Input *a_EText=(Fl_Input *)0;

Fl_Double_Window *a_Copyright=(Fl_Double_Window *)0;

Fl_Button *a_CAccept=(Fl_Button *)0;

static void cb_a_CAccept(Fl_Button*, void*) {
  a_Copyright->hide();
}

Fl_Button *a_CDontAccept=(Fl_Button *)0;

static void cb_a_CDontAccept(Fl_Button*, void*) {
  exit(0);
}

Fl_Output *a_CMessage=(Fl_Output *)0;

Fl_Double_Window *a_HelpWindow=(Fl_Double_Window *)0;

Fl_Browser *a_HelpList=(Fl_Browser *)0;

Fl_Button *a_HelpClose=(Fl_Button *)0;

static void cb_a_HelpClose(Fl_Button*, void*) {
  a_HelpWindow->hide();
}

Fl_Double_Window *a_WeaponWindow=(Fl_Double_Window *)0;

Fl_Browser *a_WSearchList=(Fl_Browser *)0;

static void cb_a_WSearchList(Fl_Browser*, void*) {
  doWeaponSearchAction(0);
}

Fl_Browser *a_WSearchDetails=(Fl_Browser *)0;

Fl_Button *a_WSAccept=(Fl_Button *)0;

static void cb_a_WSAccept(Fl_Button*, void*) {
  doWeaponSearchAction(1);
}

Fl_Button *a_WSCancel=(Fl_Button *)0;

static void cb_a_WSCancel(Fl_Button*, void*) {
  doWeaponSearchAction(2);
}

Fl_Double_Window *a_DetailsWindow=(Fl_Double_Window *)0;

Fl_Browser *a_EDInitiatorDetails1=(Fl_Browser *)0;

Fl_Text_Display *a_EDInitiatorDetails2=(Fl_Text_Display *)0;

Fl_Browser *a_EDDefenderDetails1=(Fl_Browser *)0;

Fl_Text_Display *a_EDDefenderDetails2=(Fl_Text_Display *)0;

Fl_Double_Window *a_QkMonsterAdd=(Fl_Double_Window *)0;

Fl_Input *aQkAdd_Name=(Fl_Input *)0;

Fl_Input *aQkAdd_CRating=(Fl_Input *)0;

Fl_Counter *aQkAdd_Count=(Fl_Counter *)0;

Fl_Input *aQkAdd_Icon=(Fl_Input *)0;

Fl_Button *aQkAdd_MonstIconLoad=(Fl_Button *)0;

static void cb_aQkAdd_MonstIconLoad(Fl_Button*, void*) {
  doSpecialMapAction(103);
}

Fl_Input *aQkAdd_HPMax=(Fl_Input *)0;

Fl_Input *aQkAdd_Regeneration=(Fl_Input *)0;

Fl_Input *aQkAdd_ACNormal=(Fl_Input *)0;

Fl_Input *aQkAdd_ACTouch=(Fl_Input *)0;

Fl_Input *aQkAdd_ACFlatFoot=(Fl_Input *)0;

Fl_Input *aQkAdd_InitBonus=(Fl_Input *)0;

Fl_Input *aQkAdd_Speed=(Fl_Input *)0;

Fl_Input *aQkAdd_ResistFire=(Fl_Input *)0;

Fl_Input *aQkAdd_ResistAcid=(Fl_Input *)0;

Fl_Input *aQkAdd_ResistCold=(Fl_Input *)0;

Fl_Input *aQkAdd_ResistElec=(Fl_Input *)0;

Fl_Input *aQkAdd_ResistSonic=(Fl_Input *)0;

Fl_Input *aQkAdd_SaveFort=(Fl_Input *)0;

Fl_Input *aQkAdd_SaveReflex=(Fl_Input *)0;

Fl_Input *aQkAdd_SaveWill=(Fl_Input *)0;

Fl_Input *aQkAdd_NoAttacks=(Fl_Input *)0;

Fl_Input *aQkAdd_SpellResistance=(Fl_Input *)0;

Fl_Input *aQkAdd_DamReductionHP=(Fl_Input *)0;

Fl_Input *aQkAdd_DamReductionWeapon=(Fl_Input *)0;

Fl_Choice *aQkAdd_DamReductionType=(Fl_Choice *)0;

Fl_Browser *aQkAdd_WeaponSelector=(Fl_Browser *)0;

static void cb_aQkAdd_WeaponSelector(Fl_Browser* o, void*) {
  selectQkAddEditWeapon(o->value()-1);
}

Fl_Input *aQkAdd_WeaponName=(Fl_Input *)0;

Fl_Button *aQkAdd_WeaponSearch=(Fl_Button *)0;

static void cb_aQkAdd_WeaponSearch(Fl_Button*, void*) {
  if (aQkAdd_WeaponSelector->value() > 5) {
   searchWeaponDetails(0, 1);
} else {
   searchWeaponDetails(0, 0);
};
}

Fl_Input *aQkAdd_WeaponAttkBonus1=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponAttkBonus2=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponAttkBonus3=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponAttkBonus4=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponDamage=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponCritical=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponMagicBonus=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponRange=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponReach=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponNoAttacks=(Fl_Input *)0;

Fl_Input *aQkAdd_WeaponSpecialMessage=(Fl_Input *)0;

Fl_Button *aQkAdd_Accept=(Fl_Button *)0;

static void cb_aQkAdd_Accept(Fl_Button*, void*) {
  qkMonsterAdd(1);
}

Fl_Button *aQkAdd_Cancel=(Fl_Button *)0;

static void cb_aQkAdd_Cancel(Fl_Button*, void*) {
  qkMonsterAdd(2);
}

Fl_Input *aQkAdd_WeaponFumble=(Fl_Input *)0;

Fl_Choice *aQkAdd_WeaponCritAdjustment=(Fl_Choice *)0;

Fl_Choice *aQkAdd_WeaponSize=(Fl_Choice *)0;

Fl_Input *aQkAdd_WeaponAttackTable=(Fl_Input *)0;

Fl_Input *aQkAdd_SavePoison=(Fl_Input *)0;

Fl_Input *aQkAdd_SaveDisease=(Fl_Input *)0;

Fl_Input *aQkAdd_NoInGroup=(Fl_Input *)0;

Fl_Double_Window *a_ActionWindow=(Fl_Double_Window *)0;

static void cb_a_ActionWindow(Fl_Double_Window* o, void*) {
  if (Fl::event() == 10) { setCombatDisplay(0); o->hide(); };
}

Fl_Tabs *a_CTActions=(Fl_Tabs *)0;

Fl_Tile *a_CTMelee=(Fl_Tile *)0;

Fl_Input *a_CTMeleeAC=(Fl_Input *)0;

Fl_Input *a_CTMeleeBAB=(Fl_Input *)0;

Fl_Input *a_CTMeleeRoll=(Fl_Input *)0;

Fl_Button *a_CTCalc1=(Fl_Button *)0;

static void cb_a_CTCalc1(Fl_Button*, void*) {
  calcAction(0);
}

Fl_Input *a_CTMeleeDamage=(Fl_Input *)0;

Fl_Input *a_CTMeleeStun=(Fl_Input *)0;

Fl_Input *a_CTMeleeBleeding=(Fl_Input *)0;

Fl_Input *a_CTMeleeInactive=(Fl_Input *)0;

Fl_Check_Browser *a_CTCombatMods=(Fl_Check_Browser *)0;

static void cb_a_CTCombatMods(Fl_Check_Browser*, void*) {
  calcCombatMods(0);
}

Fl_Browser *a_CTWeaponUsed=(Fl_Browser *)0;

static void cb_a_CTWeaponUsed(Fl_Browser* o, void*) {
  if (o->value() > 0) {
  setCombatDisplay(3);
};
}

Fl_Browser *a_CTDefender=(Fl_Browser *)0;

static void cb_a_CTDefender(Fl_Browser* o, void*) {
  if (o->value() > 0) {
  setCombatDisplay(4);
};
}

Fl_Button *a_CTthisAttack=(Fl_Button *)0;

static void cb_a_CTthisAttack(Fl_Button*, void*) {
  acceptCombatAction(0);
}

Fl_Button *a_CTallAttacksDone=(Fl_Button *)0;

static void cb_a_CTallAttacksDone(Fl_Button*, void*) {
  acceptCombatAction(1);
}

Fl_Check_Browser *a_CTSpecialAttacks=(Fl_Check_Browser *)0;

static void cb_a_CTSpecialAttacks(Fl_Check_Browser*, void*) {
  doSpecialAttacks();
}

Fl_Browser *a_CTWeaponDetails=(Fl_Browser *)0;

Fl_Output *a_CTAttacksLeft=(Fl_Output *)0;

Fl_Output *a_CTACBreakdown=(Fl_Output *)0;

Fl_Input *a_CTMeleeACAdjustments=(Fl_Input *)0;

Fl_Input *a_CTMeleeBABAdjustments=(Fl_Input *)0;

Fl_Input *a_CTMeleeDmgAdjustments=(Fl_Input *)0;

Fl_Button *a_CTRollD20=(Fl_Button *)0;

static void cb_a_CTRollD20(Fl_Button*, void*) {
  calcAction(2);
}

Fl_Button *a_CTRollDamage=(Fl_Button *)0;

static void cb_a_CTRollDamage(Fl_Button*, void*) {
  calcAction(3);
}

Fl_Tile *a_CTSpell=(Fl_Tile *)0;

Fl_Check_Browser *a_CTSpellEffects=(Fl_Check_Browser *)0;

static void cb_a_CTSpellEffects(Fl_Check_Browser* o, void*) {
  if (o->value() > 0) {
  setCombatDisplay(6);
};
}

Fl_Counter *a_CTSpellLevel=(Fl_Counter *)0;

static void cb_a_CTSpellLevel(Fl_Counter*, void*) {
  setCombatDisplay(10);
}

Fl_Input *a_CTSpellDC=(Fl_Input *)0;

Fl_Input *a_CTSpellMods=(Fl_Input *)0;

Fl_Button *a_CTSpellCalc=(Fl_Button *)0;

static void cb_a_CTSpellCalc(Fl_Button*, void*) {
  calcAction(1);
}

Fl_Input *a_CTSpellDamage=(Fl_Input *)0;

Fl_Input *a_CTSpellStunned=(Fl_Input *)0;

Fl_Input *a_CTSpellBleeding=(Fl_Input *)0;

Fl_Input *a_CTSpellInactive=(Fl_Input *)0;

Fl_Input *a_CTSpellDmgMods=(Fl_Input *)0;

Fl_Button *a_CTSpellSAP=(Fl_Button *)0;

static void cb_a_CTSpellSAP(Fl_Button*, void*) {
  for (int i=0; i<MAX_MEMBERS; i++) {
  if (config.i_idList[ID_DEFD][i] < MAX_PLAYERS && config.i_idList[ID_DEFD][i] > -1) {
if (config.flags.f_debug) { printf("sAM: %d\n", i); }
     a_CTSpellEffects->checked(i+1, 1);
  }
};
}

Fl_Button *a_CTSpellSAM=(Fl_Button *)0;

static void cb_a_CTSpellSAM(Fl_Button*, void*) {
  for (int i=0; i<MAX_MEMBERS; i++) {
  if (config.i_idList[ID_DEFD][i] >= MAX_PLAYERS) {
if (config.flags.f_debug) { printf("sAM: %d\n", i); }
     a_CTSpellEffects->checked(i+1, 1);
  }
};
}

Fl_Button *a_CTSpellUSA=(Fl_Button *)0;

static void cb_a_CTSpellUSA(Fl_Button*, void*) {
  a_CTSpellEffects->check_none();
}

Fl_Button *a_CTSpellAllDone=(Fl_Button *)0;

static void cb_a_CTSpellAllDone(Fl_Button*, void*) {
  acceptCombatAction(3);
}

Fl_Button *a_CTSpellAcceptThis=(Fl_Button *)0;

static void cb_a_CTSpellAcceptThis(Fl_Button*, void*) {
  acceptCombatAction(2);
}

Fl_Check_Browser *a_CTSpellModifiers=(Fl_Check_Browser *)0;

static void cb_a_CTSpellModifiers(Fl_Check_Browser*, void*) {
  calcCombatMods(1);
}

Fl_Check_Browser *a_CTSpellSaved=(Fl_Check_Browser *)0;

Fl_Check_Browser *a_CTSpellEnergyType=(Fl_Check_Browser *)0;

static void cb_a_CTSpellEnergyType(Fl_Check_Browser*, void*) {
  doSpellEnergyType(0);
}

Fl_Tile *a_CTOther=(Fl_Tile *)0;

Fl_Check_Browser *a_CTOtherActions=(Fl_Check_Browser *)0;

static void cb_a_CTOtherActions(Fl_Check_Browser*, void*) {
  setCombatDisplay(5);
}

Fl_Button *a_CTAcceptOtherAction=(Fl_Button *)0;

static void cb_a_CTAcceptOtherAction(Fl_Button*, void*) {
  acceptCombatAction(4);
}

Fl_Input *a_CTOtherHealHP=(Fl_Input *)0;

Fl_Input *a_CTOtherHealStun=(Fl_Input *)0;

Fl_Input *a_CTOtherHealBleeding=(Fl_Input *)0;

Fl_Input *a_CTOtherHealInactive=(Fl_Input *)0;

Fl_Input *a_CTOtherHealSkillMods=(Fl_Input *)0;

Fl_Browser *a_CTOtherMessages=(Fl_Browser *)0;

Fl_Check_Browser *a_CTOtherFlags=(Fl_Check_Browser *)0;

Fl_Counter *a_CTOtherSpellLevel=(Fl_Counter *)0;

Fl_Tile *a_CTSpellDetails=(Fl_Tile *)0;

Fl_Help_View *a_CTSpellHTMLDetails=(Fl_Help_View *)0;

Fl_Input *a_CTSpellDetailsSearch=(Fl_Input *)0;

static void cb_a_CTSpellDetailsSearch(Fl_Input*, void*) {
  showSRDspellEntries(0);
}

Fl_Browser *a_CTSpellDetailsList=(Fl_Browser *)0;

static void cb_a_CTSpellDetailsList(Fl_Browser*, void*) {
  selectSRDspellEntries(0);
}

Fl_Tile *a_CTMonsterDetails=(Fl_Tile *)0;

Fl_Help_View *a_CTMonsterHTMLDetails=(Fl_Help_View *)0;

Fl_Tile *a_CTNotes=(Fl_Tile *)0;

Fl_Browser *a_CTNotesDetails=(Fl_Browser *)0;

Fl_Tile *a_CTDiceRoller=(Fl_Tile *)0;

Fl_Browser *a_CTDRList1=(Fl_Browser *)0;

Fl_Browser *a_CTDRList2=(Fl_Browser *)0;

Fl_Browser *a_CTDRList3=(Fl_Browser *)0;

Fl_Browser *a_CTDRList4=(Fl_Browser *)0;

Fl_Browser *a_CTDRList5=(Fl_Browser *)0;

Fl_Browser *a_CTDRList6=(Fl_Browser *)0;

Fl_Browser *a_CTDRList7=(Fl_Browser *)0;

Fl_Browser *a_CTDRList8=(Fl_Browser *)0;

Fl_Button *a_CTDRRefresh=(Fl_Button *)0;

static void cb_a_CTDRRefresh(Fl_Button*, void*) {
  rollRNDDice();
}

Fl_Browser *a_CTMessage=(Fl_Browser *)0;

Fl_Browser *a_CTDefenderDetails=(Fl_Browser *)0;

Fl_Browser *a_CTInitiatorDetails=(Fl_Browser *)0;

Fl_Browser *a_CBActionType=(Fl_Browser *)0;

static void cb_a_CBActionType(Fl_Browser* o, void*) {
  if (o->value() > 0) {
  setCombatDisplay(2);
};
}

Fl_Button *a_CTCancel=(Fl_Button *)0;

static void cb_a_CTCancel(Fl_Button*, void*) {
  setCombatDisplay(0);
a_ActionWindow->hide();
}

Fl_Double_Window *a_WExternalGridMap=(Fl_Double_Window *)0;

gridMap *externalGridMap=(gridMap *)0;

Fl_Double_Window *a_notesWindow=(Fl_Double_Window *)0;

Fl_Input *a_NotesDescription=(Fl_Input *)0;

Fl_Input *a_ObjectIcon=(Fl_Input *)0;

Fl_Button *a_ObjectIconSelect=(Fl_Button *)0;

static void cb_a_ObjectIconSelect(Fl_Button*, void*) {
  doSpecialMapAction(102);
}

Fl_Input *a_ObjectWidth=(Fl_Input *)0;

Fl_Input *a_ObjectHeight=(Fl_Input *)0;

Fl_Button *a_NotesAccept=(Fl_Button *)0;

static void cb_a_NotesAccept(Fl_Button*, void*) {
  doNotesAction(0);
}

Fl_Button *a_NotesCancel=(Fl_Button *)0;

static void cb_a_NotesCancel(Fl_Button*, void*) {
  a_notesWindow->hide();
}

Fl_Button *a_NotesDelete=(Fl_Button *)0;

static void cb_a_NotesDelete(Fl_Button*, void*) {
  doNotesAction(1);
}

Fl_Double_Window *a_IconWindow=(Fl_Double_Window *)0;

Fl_Tabs *t_IconSelector=(Fl_Tabs *)0;

Fl_Tile *t_PlayerIcons=(Fl_Tile *)0;

Fl_Scroll *s_PlayerIcons=(Fl_Scroll *)0;

Fl_Tile *t_MonsterIcons=(Fl_Tile *)0;

Fl_Scroll *s_MonsterIcons=(Fl_Scroll *)0;

Fl_Tile *t_AnimalIcons=(Fl_Tile *)0;

Fl_Scroll *s_AnimalIcons=(Fl_Scroll *)0;

Fl_Tile *t_ObjectIcons=(Fl_Tile *)0;

Fl_Scroll *s_ObjectIcons=(Fl_Scroll *)0;

Fl_Tile *t_Other=(Fl_Tile *)0;

Fl_Scroll *s_OtherIcons=(Fl_Scroll *)0;

Fl_Button *b_ISCancel=(Fl_Button *)0;

static void cb_b_ISCancel(Fl_Button*, void*) {
  a_IconWindow->hide();
}

Fl_Double_Window *a_addToNewGroup=(Fl_Double_Window *)0;

Fl_Input *a_addNewName=(Fl_Input *)0;

Fl_Check_Button *a_addNewDisabled=(Fl_Check_Button *)0;

Fl_Button *a_addNewAccept=(Fl_Button *)0;

static void cb_a_addNewAccept(Fl_Button*, void*) {
  doOtherAction(30);
}

Fl_Button *a_addNewCancel=(Fl_Button *)0;

static void cb_a_addNewCancel(Fl_Button*, void*) {
  a_addToNewGroup->hide();
}

Fl_Double_Window *a_MassCombatWindow=(Fl_Double_Window *)0;

Fl_Browser *a_MCAttackers=(Fl_Browser *)0;

static void cb_a_MCAttackers(Fl_Browser*, void*) {
  do_masscombat(2);
}

Fl_Browser *a_MCDefenders=(Fl_Browser *)0;

static void cb_a_MCDefenders(Fl_Browser*, void*) {
  do_masscombat(3);
}

Fl_Group *a_MCAttkGrp=(Fl_Group *)0;

Fl_Input *a_MCAttkGroups=(Fl_Input *)0;

Fl_Input *a_MCAttkInGroups=(Fl_Input *)0;

Fl_Input *a_MCAttkBAB=(Fl_Input *)0;

Fl_Input *a_MCAttkDamage=(Fl_Input *)0;

Fl_Group *a_MCDefdGrp=(Fl_Group *)0;

Fl_Input *a_MCDefdInGroups=(Fl_Input *)0;

Fl_Input *a_MCDefdAC=(Fl_Input *)0;

Fl_Input *a_MCDied=(Fl_Input *)0;

Fl_Input *a_MCCurrentHP=(Fl_Input *)0;

Fl_Input *a_MCMaxHP=(Fl_Input *)0;

Fl_Check_Button *a_MCShowTotals=(Fl_Check_Button *)0;

Fl_Browser *a_MCResults=(Fl_Browser *)0;

Fl_Button *a_MCCalculate=(Fl_Button *)0;

static void cb_a_MCCalculate(Fl_Button*, void*) {
  do_masscombat(1);
}

Fl_Button *a_MCAccept=(Fl_Button *)0;

static void cb_a_MCAccept(Fl_Button*, void*) {
  do_masscombat(4);
}

Fl_Button *a_MCAllDone=(Fl_Button *)0;

static void cb_a_MCAllDone(Fl_Button*, void*) {
  do_masscombat(5);
}

Fl_Double_Window *a_d100CombatWindow=(Fl_Double_Window *)0;

Fl_Browser *d1_ActionType=(Fl_Browser *)0;

static void cb_d1_ActionType(Fl_Browser* o, void*) {
  doD100SelectAction(o->value());
}

Fl_Browser *d1_ActionMessages=(Fl_Browser *)0;

Fl_Button *d1_CancelAction=(Fl_Button *)0;

static void cb_d1_CancelAction(Fl_Button*, void*) {
  a_d100CombatWindow->hide();
}

Fl_Tabs *d1_ActionTab=(Fl_Tabs *)0;

Fl_Tile *d1_ActionMeleeTab=(Fl_Tile *)0;

Fl_Button *d1_CombatSpecAttk1=(Fl_Button *)0;

static void cb_d1_CombatSpecAttk1(Fl_Button*, void*) {
  doD100ActionOption(0,2);
}

Fl_Choice *d1_CombatDefenderArmor=(Fl_Choice *)0;

static void cb_d1_CombatDefenderArmor(Fl_Choice*, void*) {
  doD100ActionOption(0,5);
}

Fl_Output *d1_CombatAttacksLeft=(Fl_Output *)0;

Fl_Button *d1_CombatHitThem=(Fl_Button *)0;

static void cb_d1_CombatHitThem(Fl_Button*, void*) {
  doD100ActionOption(0,4);
}

Fl_Tile *d1_ActionSpellTab=(Fl_Tile *)0;

Fl_Tile *d1_ActionMissileTab=(Fl_Tile *)0;

Fl_Tile *d1_ActionHealTab=(Fl_Tile *)0;

Fl_Tile *d1_ActionMoveTab=(Fl_Tile *)0;

Fl_Choice *d1_CombatMMDifficulty=(Fl_Choice *)0;

Fl_Tile *d1_ActionSpellDetailsTab=(Fl_Tile *)0;

Fl_Input *d1_SpellSearchName=(Fl_Input *)0;

static void cb_d1_SpellSearchName(Fl_Input* o, void*) {
  doD100SpellSearch(o->value());
}

Fl_Browser *d1_SpellSearchFound=(Fl_Browser *)0;

static void cb_d1_SpellSearchFound(Fl_Browser* o, void*) {
  doD100SpellSearchAction(0, o->value());
}

Fl_Browser *d1_SpellSearchDetails=(Fl_Browser *)0;

Fl_Tile *d1_ActionDiceRoller=(Fl_Tile *)0;

Fl_Browser *d1_CTDRList1=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList2=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList3=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList4=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList5=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList6=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList7=(Fl_Browser *)0;

Fl_Browser *d1_CTDRList8=(Fl_Browser *)0;

Fl_Button *d1_DRRefresh=(Fl_Button *)0;

static void cb_d1_DRRefresh(Fl_Button*, void*) {
  rollRNDDice();
}

Fl_Double_Window *qkEdit_Window=(Fl_Double_Window *)0;

Fl_Input *qkEdit_Name=(Fl_Input *)0;

Fl_Input *qkEdit_HPCurrent=(Fl_Input *)0;

Fl_Input *qkEdit_HPMax=(Fl_Input *)0;

Fl_Input *qkEdit_DBNormal=(Fl_Input *)0;

Fl_Input *qkEdit_ACTouch=(Fl_Input *)0;

Fl_Input *qkEdit_ACFlatFoot=(Fl_Input *)0;

Fl_Input *qkEdit_NoInGroup=(Fl_Input *)0;

Fl_Input *qkEdit_SaveFort=(Fl_Input *)0;

Fl_Input *qkEdit_SaveReflex=(Fl_Input *)0;

Fl_Input *qkEdit_SaveWill=(Fl_Input *)0;

Fl_Input *qkEdit_SavePoison=(Fl_Input *)0;

Fl_Input *qkEdit_SaveDisease=(Fl_Input *)0;

Fl_Input *qkEdit_W1Id=(Fl_Input *)0;

Fl_Input *qkEdit_W1Name=(Fl_Input *)0;

Fl_Input *qkEdit_W1AB1=(Fl_Input *)0;

Fl_Input *qkEdit_W1AB2=(Fl_Input *)0;

Fl_Input *qkEdit_W1AB3=(Fl_Input *)0;

Fl_Input *qkEdit_W1AB4=(Fl_Input *)0;

Fl_Input *qkEdit_W1Damage=(Fl_Input *)0;

Fl_Input *qkEdit_W1Critical=(Fl_Input *)0;

Fl_Input *qkEdit_W2Id=(Fl_Input *)0;

Fl_Input *qkEdit_W2Name=(Fl_Input *)0;

Fl_Input *qkEdit_W2AB1=(Fl_Input *)0;

Fl_Input *qkEdit_W2AB2=(Fl_Input *)0;

Fl_Input *qkEdit_W2AB3=(Fl_Input *)0;

Fl_Input *qkEdit_W2AB4=(Fl_Input *)0;

Fl_Input *qkEdit_W2Damage=(Fl_Input *)0;

Fl_Input *qkEdit_W2Critical=(Fl_Input *)0;

Fl_Input *qkEdit_Space=(Fl_Input *)0;

Fl_Input *qkEdit_Icon=(Fl_Input *)0;

Fl_Button *qkEdit_IconLoad=(Fl_Button *)0;

static void cb_qkEdit_IconLoad(Fl_Button*, void*) {
  doSpecialMapAction(104);
}

Fl_Button *qkEdit_Accept=(Fl_Button *)0;

static void cb_qkEdit_Accept(Fl_Button*, void*) {
  doQuickEdit(1);
}

Fl_Button *qkEdit_Cancel=(Fl_Button *)0;

static void cb_qkEdit_Cancel(Fl_Button*, void*) {
  doQuickEdit(2);
}

Fl_Double_Window *a_MainWindow=(Fl_Double_Window *)0;

static void cb_a_MainWindow(Fl_Double_Window*, void*) {
  if (Fl::event() == 10) { doSystemExit(); };
}

Fl_Tabs *a_TMain=(Fl_Tabs *)0;

static void cb_a_TMain(Fl_Tabs*, void*) {
  //printf("a_TMain: event %d\n", Fl::event());
}

Fl_Tile *a_TCombat=(Fl_Tile *)0;

static void cb_a_TCombat(Fl_Tile*, void*) {
  //printf("a_TCombat: event %d\n", Fl::event());
}

Fl_Browser *a_CBInitiators=(Fl_Browser *)0;

static void cb_a_CBInitiators(Fl_Browser* o, void*) {
  if (o->value() > 0) { setCombatDisplay(9); };
}

Fl_Button *a_CTEndOfRound=(Fl_Button *)0;

static void cb_a_CTEndOfRound(Fl_Button*, void*) {
  endOfRound();
setCombatDisplay(0);
}

Fl_Button *a_CTHelp=(Fl_Button *)0;

static void cb_a_CTHelp(Fl_Button*, void*) {
  a_HelpWindow->show();
}

Fl_Button *aCB_MoreDetails=(Fl_Button *)0;

static void cb_aCB_MoreDetails(Fl_Button*, void*) {
  if (a_DetailsWindow->shown() != 0) { a_DetailsWindow->hide(); } else { a_DetailsWindow->show(); };
}

Fl_Browser *a_CombatMessages=(Fl_Browser *)0;

Fl_Button *a_CombatZoomIn=(Fl_Button *)0;

static void cb_a_CombatZoomIn(Fl_Button*, void*) {
  doMapMode(-13);
}

Fl_Button *a_CombatZoomOut=(Fl_Button *)0;

static void cb_a_CombatZoomOut(Fl_Button*, void*) {
  doMapMode(-12);
}

Fl_Button *a_CombatXZoomIn=(Fl_Button *)0;

static void cb_a_CombatXZoomIn(Fl_Button*, void*) {
  doMapMode(-11);
}

Fl_Button *a_CombatXZoomOut=(Fl_Button *)0;

static void cb_a_CombatXZoomOut(Fl_Button*, void*) {
  doMapMode(-10);
}

Fl_Button *a_CombatEnableXWindow=(Fl_Button *)0;

static void cb_a_CombatEnableXWindow(Fl_Button* o, void*) {
  if (a_WExternalGridMap->visible()) { a_WExternalGridMap->hide(); o->label("Show Xm"); }
else { a_WExternalGridMap->show(); o->label("Hide Xm"); }

setWindowTitles();
}

Fl_Choice *a_CombatDrawMode=(Fl_Choice *)0;

static void cb_a_CombatDrawMode(Fl_Choice* o, void*) {
  doMapMode(o->value());
}

Fl_Group *a_CombatColorGroup=(Fl_Group *)0;

Fl_Choice *a_CombatShapes=(Fl_Choice *)0;

static void cb_a_CombatShapes(Fl_Choice*, void*) {
  doMapMode(-1);
}

Fl_Choice *a_CombatVisibility=(Fl_Choice *)0;

static void cb_a_CombatVisibility(Fl_Choice* o, void*) {
  combatGridMap->setGridVisibility(o->value());
}

Fl_Choice *a_CombatLayer=(Fl_Choice *)0;

static void cb_a_CombatLayer(Fl_Choice* o, void*) {
  combatGridMap->setGridLayer(o->value());
}

Fl_Choice *a_CombatShapesFill=(Fl_Choice *)0;

static void cb_a_CombatShapesFill(Fl_Choice*, void*) {
  doMapMode(-2);
}

Fl_Choice *a_CombatSpecialAction=(Fl_Choice *)0;

static void cb_a_CombatSpecialAction(Fl_Choice* o, void*) {
  doSpecialMapAction(o->value());
}

Fl_Counter *a_CombatShapeWidth=(Fl_Counter *)0;

static void cb_a_CombatShapeWidth(Fl_Counter*, void*) {
  doMapMode(-3);
}

Fl_Counter *a_CombatShapeHeight=(Fl_Counter *)0;

static void cb_a_CombatShapeHeight(Fl_Counter*, void*) {
  doMapMode(-3);
}

gridMap *combatGridMap=(gridMap *)0;

Fl_Tile *a_TInitiatives=(Fl_Tile *)0;

Fl_Browser *a_IActions=(Fl_Browser *)0;

static void cb_a_IActions(Fl_Browser* o, void*) {
  if (o->value() > 0) {
   doInitiativeAction(o->value());
};
}

Fl_Group *a_IPlayers=(Fl_Group *)0;

Fl_Group *a_IMonsters=(Fl_Group *)0;

Fl_Tile *a_TGroup=(Fl_Tile *)0;

Fl_Browser *a_GroupList=(Fl_Browser *)0;

static void cb_a_GroupList(Fl_Browser*, void*) {
  doGroupAction(0);
}

Fl_Group *a_GroupGroup=(Fl_Group *)0;

Fl_Input *a_GroupDescription=(Fl_Input *)0;

Fl_Check_Button *a_GroupActive=(Fl_Check_Button *)0;

Fl_Check_Browser *a_GroupMembers=(Fl_Check_Browser *)0;

Fl_Button *a_GroupAccept=(Fl_Button *)0;

static void cb_a_GroupAccept(Fl_Button*, void*) {
  doGroupAction(2);
}

Fl_Button *a_GroupCancel=(Fl_Button *)0;

static void cb_a_GroupCancel(Fl_Button*, void*) {
  doGroupAction(1);
}

Fl_Button *a_GroupDisableAll=(Fl_Button *)0;

static void cb_a_GroupDisableAll(Fl_Button*, void*) {
  doGroupAction(4);
}

Fl_Button *a_GroupEnableAll=(Fl_Button *)0;

static void cb_a_GroupEnableAll(Fl_Button*, void*) {
  doGroupAction(3);
}

Fl_Button *a_GroupClear=(Fl_Button *)0;

static void cb_a_GroupClear(Fl_Button*, void*) {
  // doGroupAction(5);
a_GroupMembers->check_none();
}

Fl_Button *a_GroupDeleteAll=(Fl_Button *)0;

static void cb_a_GroupDeleteAll(Fl_Button*, void*) {
  doGroupAction(6);
}

Fl_Button *a_GroupRemoveAll=(Fl_Button *)0;

static void cb_a_GroupRemoveAll(Fl_Button*, void*) {
  doGroupAction(7);
}

Fl_Button *a_GroupDisableSelected=(Fl_Button *)0;

static void cb_a_GroupDisableSelected(Fl_Button*, void*) {
  doGroupAction(8);
}

Fl_Button *a_GroupSelectAll=(Fl_Button *)0;

static void cb_a_GroupSelectAll(Fl_Button*, void*) {
  // doGroupAction(5);
a_GroupMembers->check_all();
}

Fl_Button *a_GroupResetAll=(Fl_Button *)0;

static void cb_a_GroupResetAll(Fl_Button*, void*) {
  doOtherAction(12);
}

Fl_Tile *a_TEdit=(Fl_Tile *)0;

Fl_Browser *aEdit_players=(Fl_Browser *)0;

static void cb_aEdit_players(Fl_Browser* o, void*) {
  editPlayer(o->value() - 1);
}

Fl_Browser *aEdit_monsters=(Fl_Browser *)0;

static void cb_aEdit_monsters(Fl_Browser* o, void*) {
  editPlayer(MAX_PLAYERS + o->value() -1);
}

Fl_Tabs *aEdt_Tabs=(Fl_Tabs *)0;

Fl_Tile *aEdt_Main=(Fl_Tile *)0;

Fl_Input *aEdit_Name=(Fl_Input *)0;

Fl_Choice *aEdit_Race=(Fl_Choice *)0;

Fl_Choice *aEdit_Alignment=(Fl_Choice *)0;

Fl_Choice *aEdit_Class1=(Fl_Choice *)0;

Fl_Choice *aEdit_Class2=(Fl_Choice *)0;

Fl_Choice *aEdit_Class3=(Fl_Choice *)0;

Fl_Choice *aEdit_Class4=(Fl_Choice *)0;

Fl_Input *aEdit_Level1=(Fl_Input *)0;

Fl_Input *aEdit_Level2=(Fl_Input *)0;

Fl_Input *aEdit_Level3=(Fl_Input *)0;

Fl_Input *aEdit_Level4=(Fl_Input *)0;

Fl_Input *aEdit_HPMax=(Fl_Input *)0;

Fl_Input *aEdit_HPCurrent=(Fl_Input *)0;

Fl_Input *aEdit_NonLethal=(Fl_Input *)0;

Fl_Input *aEdit_Inactive=(Fl_Input *)0;

Fl_Input *aEdit_Stun=(Fl_Input *)0;

Fl_Input *aEdit_TempHP=(Fl_Input *)0;

Fl_Input *aEdit_Bleeding=(Fl_Input *)0;

Fl_Input *aEdit_Disabled=(Fl_Input *)0;

Fl_Input *aEdit_Unconcious=(Fl_Input *)0;

Fl_Input *aEdit_Regeneration=(Fl_Input *)0;

Fl_Input *aEdit_EnhHP=(Fl_Input *)0;

Fl_Input *aEdit_ACNormal=(Fl_Input *)0;

Fl_Input *aEdit_ACTouch=(Fl_Input *)0;

Fl_Input *aEdit_ACFlatFoot=(Fl_Input *)0;

Fl_Input *aEdit_NegateCritical=(Fl_Input *)0;

Fl_Input *aEdit_ACSecDex=(Fl_Input *)0;

Fl_Input *aEdit_ACSecSize=(Fl_Input *)0;

Fl_Input *aEdit_ACSecDeflection=(Fl_Input *)0;

Fl_Input *aEdit_ACSecNatural=(Fl_Input *)0;

Fl_Input *aEdit_ACSecArmor=(Fl_Input *)0;

Fl_Input *aEdit_ACSecShield=(Fl_Input *)0;

Fl_Input *aEdit_ACSecDodge=(Fl_Input *)0;

Fl_Input *aEdit_BABMelee1=(Fl_Input *)0;

Fl_Input *aEdit_BABMelee2=(Fl_Input *)0;

Fl_Input *aEdit_BABMelee3=(Fl_Input *)0;

Fl_Input *aEdit_BABRanged1=(Fl_Input *)0;

Fl_Input *aEdit_BABRanged2=(Fl_Input *)0;

Fl_Input *aEdit_BABRanged3=(Fl_Input *)0;

Fl_Input *aEdit_BABGrapple1=(Fl_Input *)0;

Fl_Input *aEdit_BABGrapple2=(Fl_Input *)0;

Fl_Input *aEdit_BABGrapple3=(Fl_Input *)0;

Fl_Input *aEdit_InitBonus=(Fl_Input *)0;

Fl_Input *aEdit_InitRoll=(Fl_Input *)0;

Fl_Input *aEdit_Speed=(Fl_Input *)0;

Fl_Input *aEdit_SaveFort=(Fl_Input *)0;

Fl_Input *aEdit_SaveReflex=(Fl_Input *)0;

Fl_Input *aEdit_SaveWill=(Fl_Input *)0;

Fl_Input *aEdit_IconFilename=(Fl_Input *)0;

Fl_Button *aEdit_LoadIcon=(Fl_Button *)0;

static void cb_aEdit_LoadIcon(Fl_Button*, void*) {
  doSpecialMapAction(100);
}

Fl_Input *aEdit_MapX=(Fl_Input *)0;

Fl_Input *aEdit_MapY=(Fl_Input *)0;

Fl_Input *aEdit_Reach=(Fl_Input *)0;

Fl_Input *aEdit_Space=(Fl_Input *)0;

Fl_Input *aEdit_InGroup=(Fl_Input *)0;

Fl_Check_Browser *aEdit_Flags=(Fl_Check_Browser *)0;

Fl_Input *aEdit_HitDice=(Fl_Input *)0;

Fl_Input *aEdit_Items=(Fl_Input *)0;

Fl_Input *aEdit_ACNoParry=(Fl_Input *)0;

Fl_Input *aEdit_SavePoison=(Fl_Input *)0;

Fl_Input *aEdit_SaveDisease=(Fl_Input *)0;

Fl_Input *aEdit_RoundsDeathIn=(Fl_Input *)0;

Fl_Input *aEdit_BaseSpells=(Fl_Input *)0;

Fl_Input *aEdit_DirectedSpells=(Fl_Input *)0;

Fl_Choice *aEdit_ArmorWorn=(Fl_Choice *)0;

Fl_Choice *aEdit_ArmorLegWorn=(Fl_Choice *)0;

Fl_Choice *aEdit_ArmorArmWorn=(Fl_Choice *)0;

Fl_Choice *aEdit_ArmorHelmWorn=(Fl_Choice *)0;

Fl_Input *aEdit_NoInGroup=(Fl_Input *)0;

Fl_Tile *aEdt_Weapons=(Fl_Tile *)0;

Fl_Input *aEdit_NoAttacks=(Fl_Input *)0;

Fl_Browser *aEdit_WeaponSelector=(Fl_Browser *)0;

static void cb_aEdit_WeaponSelector(Fl_Browser* o, void*) {
  selectEditWeapon(o->value()-1);
}

Fl_Check_Button *aEdit_WeaponAvailable=(Fl_Check_Button *)0;

Fl_Input *aEdit_WeaponName=(Fl_Input *)0;

Fl_Button *aEdit_WeaponSearch=(Fl_Button *)0;

static void cb_aEdit_WeaponSearch(Fl_Button*, void*) {
  if (aEdit_WeaponSelector->value() > 5) {
   searchWeaponDetails(0, 1);
} else {
   searchWeaponDetails(0, 0);
};
}

Fl_Input *aEdit_WeaponAttkBonus1=(Fl_Input *)0;

Fl_Input *aEdit_WeaponAttkBonus2=(Fl_Input *)0;

Fl_Input *aEdit_WeaponAttkBonus3=(Fl_Input *)0;

Fl_Input *aEdit_WeaponAttkBonus4=(Fl_Input *)0;

Fl_Input *aEdit_WeaponDamage=(Fl_Input *)0;

Fl_Input *aEdit_WeaponCritical=(Fl_Input *)0;

Fl_Input *aEdit_WeaponMagicBonus=(Fl_Input *)0;

Fl_Input *aEdit_WeaponRange=(Fl_Input *)0;

Fl_Input *aEdit_WeaponReach=(Fl_Input *)0;

Fl_Input *aEdit_WeaponNoAttacks=(Fl_Input *)0;

Fl_Input *aEdit_WeaponSpecialMessage=(Fl_Input *)0;

Fl_Choice *aEdit_WeaponType=(Fl_Choice *)0;

Fl_Button *aEdit_WeaponClear=(Fl_Button *)0;

static void cb_aEdit_WeaponClear(Fl_Button*, void*) {
  aEdit_WeaponName->value("Empty Slot");
aEdit_WeaponAttkBonus1->value("0"); aEdit_WeaponAttkBonus2->value("0"); aEdit_WeaponAttkBonus3->value("0"); aEdit_WeaponAttkBonus4->value("0");
aEdit_WeaponDamage->value(""); aEdit_WeaponCritical->value(""); aEdit_WeaponMagicBonus->value("");
aEdit_WeaponRange->value(""); aEdit_WeaponReach->value(""); aEdit_WeaponNoAttacks->value("");
aEdit_WeaponSpecialMessage->value(""); aEdit_WeaponFumble->value(""); aEdit_WeaponCritAdjustment->value(0);
aEdit_WeaponSize->value(0); aEdit_WeaponAttackTable->value("");
}

Fl_Input *aEdit_WeaponFumble=(Fl_Input *)0;

Fl_Choice *aEdit_WeaponCritAdjustment=(Fl_Choice *)0;

Fl_Choice *aEdit_WeaponSize=(Fl_Choice *)0;

Fl_Input *aEdit_WeaponAttackTable=(Fl_Input *)0;

Fl_Tile *aEdt_Other=(Fl_Tile *)0;

Fl_Input *aEdit_CRating=(Fl_Input *)0;

Fl_Choice *aEdit_Size=(Fl_Choice *)0;

Fl_Input *aEdit_XPCurr=(Fl_Input *)0;

Fl_Input *aEdit_XPTemp=(Fl_Input *)0;

Fl_Input *aEdit_d201=(Fl_Input *)0;

Fl_Input *aEdit_d202=(Fl_Input *)0;

Fl_Input *aEdit_d203=(Fl_Input *)0;

Fl_Input *aEdit_d204=(Fl_Input *)0;

Fl_Input *aEdit_d205=(Fl_Input *)0;

Fl_Input *aEdit_d206=(Fl_Input *)0;

Fl_Input *aEdit_d207=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC0=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC1=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC2=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC3=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC4=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC5=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC6=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC7=(Fl_Input *)0;

Fl_Input *aEdit_SpellDC8=(Fl_Input *)0;

Fl_Input *aEdit_SpellFailure=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistance=(Fl_Input *)0;

Fl_Input *aEdit_StatsSTR0=(Fl_Input *)0;

Fl_Input *aEdit_StatsSTR1=(Fl_Input *)0;

Fl_Input *aEdit_StatsDEX0=(Fl_Input *)0;

Fl_Input *aEdit_StatsDEX1=(Fl_Input *)0;

Fl_Input *aEdit_StatsCON0=(Fl_Input *)0;

Fl_Input *aEdit_StatsCON1=(Fl_Input *)0;

Fl_Input *aEdit_StatsINT0=(Fl_Input *)0;

Fl_Input *aEdit_StatsINT1=(Fl_Input *)0;

Fl_Input *aEdit_StatsWIS0=(Fl_Input *)0;

Fl_Input *aEdit_StatsWIS1=(Fl_Input *)0;

Fl_Input *aEdit_StatsCHA0=(Fl_Input *)0;

Fl_Input *aEdit_StatsCHA1=(Fl_Input *)0;

Fl_Input *aEdit_DamReductionHP=(Fl_Input *)0;

Fl_Input *aEdit_DamReductionWeapon=(Fl_Input *)0;

Fl_Choice *aEdit_DamReductionType=(Fl_Choice *)0;

Fl_Input *aEdit_SkillSearch=(Fl_Input *)0;

Fl_Input *aEdit_SkillSOH=(Fl_Input *)0;

Fl_Input *aEdit_SkillSpot=(Fl_Input *)0;

Fl_Input *aEdit_SkillOLocks=(Fl_Input *)0;

Fl_Input *aEdit_SkillMoveSilently=(Fl_Input *)0;

Fl_Input *aEdit_SkillConcentration=(Fl_Input *)0;

Fl_Input *aEdit_SkillListen=(Fl_Input *)0;

Fl_Input *aEdit_SkillHide=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax0=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur0=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax1=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur1=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax2=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur2=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax3=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur3=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax4=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur4=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax5=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur5=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax6=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur6=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax7=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur7=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax8=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur8=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotMax9=(Fl_Input *)0;

Fl_Input *aEdit_SpellSlotCur9=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceFire1=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceFire2=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceAcid1=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceAcid2=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceCold1=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceCold2=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceElec1=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceElec2=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceSonic1=(Fl_Input *)0;

Fl_Input *aEdit_SpellResistanceSonic2=(Fl_Input *)0;

Fl_Input *aEdit_RoundsSpellChg=(Fl_Input *)0;

Fl_Input *aEdit_RoundsMissileChg=(Fl_Input *)0;

Fl_Tile *aEdit_TNotes=(Fl_Tile *)0;

Fl_Text_Editor *aEdit_Notes=(Fl_Text_Editor *)0;

Fl_Button *aEdt_Accept=(Fl_Button *)0;

static void cb_aEdt_Accept(Fl_Button*, void*) {
  savePlayer(config.i_editID);
}

Fl_Button *aEdt_Cancel=(Fl_Button *)0;

static void cb_aEdt_Cancel(Fl_Button*, void*) {
  cancelEdit();
}

Fl_Choice *aEdit_SpecialActions=(Fl_Choice *)0;

static void cb_aEdit_SpecialActions(Fl_Choice* o, void*) {
  doEditSpecialActions(o->value());
}

Fl_Input *a_EdtQkMonstSearch=(Fl_Input *)0;

static void cb_a_EdtQkMonstSearch(Fl_Input* o, void*) {
  searchQkMonsters(o->value());
}

Fl_Browser *a_EdtQkMonList=(Fl_Browser *)0;

static void cb_a_EdtQkMonList(Fl_Browser*, void*) {
  qkMonsterAction(1);
}

Fl_Counter *a_EdtQkMonAddCtr=(Fl_Counter *)0;

Fl_Button *aEdit_AddQkMonsters=(Fl_Button *)0;

static void cb_aEdit_AddQkMonsters(Fl_Button*, void*) {
  actionQkMonsters(0);
}

Fl_Button *aEdit_EditQkMonsters=(Fl_Button *)0;

static void cb_aEdit_EditQkMonsters(Fl_Button*, void*) {
  actionQkMonsters(1);
}

Fl_Button *aEdit_QkMonstersWildSearch=(Fl_Button *)0;

static void cb_aEdit_QkMonstersWildSearch(Fl_Button*, void*) {
  actionQkMonsters(3);
}

Fl_Counter *a_EdtQkMonCRSearch=(Fl_Counter *)0;

static void cb_a_EdtQkMonCRSearch(Fl_Counter*, void*) {
  // actionQkMonsters(3);
}

Fl_Button *aEdit_Dump=(Fl_Button *)0;

static void cb_aEdit_Dump(Fl_Button*, void*) {
  dump_player_details();
}

Fl_Group *aEL_CalculatorGroup=(Fl_Group *)0;

Fl_Counter *aELC_ELLevel=(Fl_Counter *)0;

static void cb_aELC_ELLevel(Fl_Counter*, void*) {
  calcELLevel();
}

Fl_Browser *aELC_Results=(Fl_Browser *)0;

Fl_Choice *a_EdtQkMonCREnvironment=(Fl_Choice *)0;

Fl_Button *aEdit_SaveQkMonsters=(Fl_Button *)0;

static void cb_aEdit_SaveQkMonsters(Fl_Button*, void*) {
  actionQkMonsters(-1);
}

Fl_Button *aEdt_QkMonsterAdd=(Fl_Button *)0;

static void cb_aEdt_QkMonsterAdd(Fl_Button*, void*) {
  qkMonsterAdd(0);
}

Fl_Input *a_EdtQkMonstIconFilename=(Fl_Input *)0;

Fl_Button *a_EdtQkMonstIconLoad=(Fl_Button *)0;

static void cb_a_EdtQkMonstIconLoad(Fl_Button*, void*) {
  doSpecialMapAction(101);
}

Fl_Check_Button *aEdit_showEnabled=(Fl_Check_Button *)0;

static void cb_aEdit_showEnabled(Fl_Check_Button*, void*) {
  reloadNames(0);
}

Fl_Tile *a_TOther=(Fl_Tile *)0;

Fl_Tabs *a_OTabs=(Fl_Tabs *)0;

Fl_Tile *a_OTAutoDamage=(Fl_Tile *)0;

Fl_Check_Browser *a_OTADList=(Fl_Check_Browser *)0;

static void cb_a_OTADList(Fl_Check_Browser*, void*) {
  doAutoDamageAction(1);
}

Fl_Button *a_OTADAccept=(Fl_Button *)0;

static void cb_a_OTADAccept(Fl_Button*, void*) {
  doAutoDamageAction(2);
}

Fl_Button *a_OTADCancel=(Fl_Button *)0;

static void cb_a_OTADCancel(Fl_Button*, void*) {
  doAutoDamageAction(3);
}

Fl_Check_Browser *a_OTADInitiateList=(Fl_Check_Browser *)0;

static void cb_a_OTADInitiateList(Fl_Check_Browser* o, void*) {
  int i = o->value();
o->check_none();
o->checked(i, 1);
}

Fl_Check_Browser *a_OTADReceiveList=(Fl_Check_Browser *)0;

Fl_Input *a_OTADDescription=(Fl_Input *)0;

Fl_Input *a_OTADDamage=(Fl_Input *)0;

Fl_Input *a_OTADRounds=(Fl_Input *)0;

Fl_Input *a_OTADRoundsDone=(Fl_Input *)0;

Fl_Check_Browser *a_OTADFlags=(Fl_Check_Browser *)0;

static void cb_a_OTADFlags(Fl_Check_Browser*, void*) {
  doAutoDamageAction(4);
}

Fl_Choice *a_OTADType=(Fl_Choice *)0;

Fl_Tile *a_TMassSkillCheck=(Fl_Tile *)0;

Fl_Check_Browser *aMSC_DoingList=(Fl_Check_Browser *)0;

Fl_Button *aMSC_refresh=(Fl_Button *)0;

static void cb_aMSC_refresh(Fl_Button*, void*) {
  doMassSkillCheck(0);
}

Fl_Button *aMSC_DisableAllPlayers=(Fl_Button *)0;

static void cb_aMSC_DisableAllPlayers(Fl_Button*, void*) {
  extern ADMPsystem config;

int i;

for (i=aMSC_DoingList->nitems(); i>=0; i--) {
   if (config.i_idList[ID_MSKILLCHK][i] < MAX_PLAYERS && config.i_idList[ID_MSKILLCHK][i] > -1) {
      aMSC_DoingList->checked(i+1, 1);
   }
};
}

Fl_Button *aMSC_DisableAllMonsters=(Fl_Button *)0;

static void cb_aMSC_DisableAllMonsters(Fl_Button*, void*) {
  extern ADMPsystem config;

int i;

for (i=aMSC_DoingList->nitems(); i>=0; i--) {
   if (config.i_idList[ID_MSKILLCHK][i] >= MAX_PLAYERS && config.i_idList[ID_MSKILLCHK][i] < MAX_MEMBERS) {
      aMSC_DoingList->checked(i+1, 1);
   }
};
}

Fl_Button *aMSC_DisableUnsetAll=(Fl_Button *)0;

static void cb_aMSC_DisableUnsetAll(Fl_Button*, void*) {
  aMSC_DoingList->check_none();
}

Fl_Input *aMSC_DCValue=(Fl_Input *)0;

Fl_Choice *aMSC_flags=(Fl_Choice *)0;

Fl_Choice *aMSC_SkillList=(Fl_Choice *)0;

Fl_Button *aMSC_Calculate=(Fl_Button *)0;

static void cb_aMSC_Calculate(Fl_Button*, void*) {
  doMassSkillCheck(2);
}

Fl_Browser *aMSC_ResultList=(Fl_Browser *)0;

Fl_Tile *a_TLogFile=(Fl_Tile *)0;

Fl_Browser *aLF_Logfile=(Fl_Browser *)0;

Fl_Button *aFL_Refresh=(Fl_Button *)0;

static void cb_aFL_Refresh(Fl_Button*, void*) {
  aLF_Logfile->load("logfile.txt");

aLF_Logfile->bottomline(aLF_Logfile->size());
}

Fl_Tile *a_TQkIcon=(Fl_Tile *)0;

Fl_Button *a_qkIconRefresh=(Fl_Button *)0;

static void cb_a_qkIconRefresh(Fl_Button*, void*) {
  doQkIcon(0);
}

Fl_Check_Browser *a_qkIconList=(Fl_Check_Browser *)0;

Fl_Button *a_qkIconLoad=(Fl_Button *)0;

static void cb_a_qkIconLoad(Fl_Button*, void*) {
  doQkIcon(1);
}

Fl_Input *a_qkIconIcon=(Fl_Input *)0;

Fl_Input *a_qkIconSpace=(Fl_Input *)0;

Fl_Input *a_qkIconReach=(Fl_Input *)0;

Fl_Button *a_qkIconDoit=(Fl_Button *)0;

static void cb_a_qkIconDoit(Fl_Button*, void*) {
  doQkIcon(2);
}

Fl_Tile *T_massWeaponCopy=(Fl_Tile *)0;

Fl_Check_Browser *mWC_FromList=(Fl_Check_Browser *)0;

static void cb_mWC_FromList(Fl_Check_Browser* o, void*) {
  o->deactivate();
}

Fl_Check_Browser *mWC_ToList=(Fl_Check_Browser *)0;

Fl_Button *mWC_Refresh=(Fl_Button *)0;

static void cb_mWC_Refresh(Fl_Button*, void*) {
  doCopyWeaponDetails(0);
}

Fl_Button *mWC_WeaponCopy=(Fl_Button *)0;

static void cb_mWC_WeaponCopy(Fl_Button*, void*) {
  doCopyWeaponDetails(1);
}

Fl_Button *mWC_AllCopy=(Fl_Button *)0;

static void cb_mWC_AllCopy(Fl_Button*, void*) {
  doCopyWeaponDetails(2);
}

Fl_Tile *t_QkSpelllists=(Fl_Tile *)0;

Fl_Choice *qsl_castertype=(Fl_Choice *)0;

static void cb_qsl_castertype(Fl_Choice*, void*) {
  doSpellLists(0);
}

Fl_Counter *qsl_casterlevel=(Fl_Counter *)0;

static void cb_qsl_casterlevel(Fl_Counter*, void*) {
  doSpellLists(0);
}

Fl_Input *qsl_spellsLevel1=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel2=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel3=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel4=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel5=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel6=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel7=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel8=(Fl_Input *)0;

Fl_Input *qsl_spellsLevel9=(Fl_Input *)0;

Fl_Input *qsl_AttackRating=(Fl_Input *)0;

Fl_Input *qsl_DefenceRating=(Fl_Input *)0;

Fl_Button *qsl_DoIt=(Fl_Button *)0;

static void cb_qsl_DoIt(Fl_Button*, void*) {
  doSpellLists(1);
}

Fl_Input *qsl_spellLists=(Fl_Input *)0;

Fl_Tile *t_HealMonsters=(Fl_Tile *)0;

Fl_Group *gHM_Monsters=(Fl_Group *)0;

Fl_Button *bHM_Refresh=(Fl_Button *)0;

static void cb_bHM_Refresh(Fl_Button*, void*) {
  doHealMonsters(0);
}

Fl_Button *bHM_Accept=(Fl_Button *)0;

static void cb_bHM_Accept(Fl_Button*, void*) {
  doHealMonsters(1);
}

Fl_Input *iHM_allMonsters=(Fl_Input *)0;

Fl_Tile *a_TSystem=(Fl_Tile *)0;

Fl_Input *aSys_Rounds=(Fl_Input *)0;

static void cb_aSys_Rounds(Fl_Input* o, void*) {
  int i=atoi(o->value());
config.i_roundCount = i;
if (config.flags.f_debug) {printf("Set to %d\n", i); };
}

Fl_Choice *aSys_Bleeding=(Fl_Choice *)0;

static void cb_aSys_Bleeding(Fl_Choice* o, void*) {
  config.i_whenBleed = o->value();
if (config.flags.f_debug) { printf("Set to %d\n", o->value()); };
}

Fl_Choice *aSys_XPAllocation=(Fl_Choice *)0;

static void cb_aSys_XPAllocation(Fl_Choice* o, void*) {
  config.i_xpAllocate = o->value();
}

Fl_Choice *aSys_GroupInitiatives=(Fl_Choice *)0;

static void cb_aSys_GroupInitiatives(Fl_Choice* o, void*) {
  config.i_doGroupInitiatives = o->value();
}

Fl_Choice *aSys_MultipleAttacks=(Fl_Choice *)0;

static void cb_aSys_MultipleAttacks(Fl_Choice* o, void*) {
  config.i_attackGroup = o->value();
}

Fl_Input *aSys_AttkSep1=(Fl_Input *)0;

static void cb_aSys_AttkSep1(Fl_Input* o, void*) {
  config.i_attackSeparation[0] = atoi(o->value());
}

Fl_Input *aSys_AttkSep2=(Fl_Input *)0;

static void cb_aSys_AttkSep2(Fl_Input* o, void*) {
  config.i_attackSeparation[1] = atoi(o->value());
}

Fl_Input *aSys_AttkSep3=(Fl_Input *)0;

static void cb_aSys_AttkSep3(Fl_Input* o, void*) {
  config.i_attackSeparation[2] = atoi(o->value());
}

Fl_Input *aSys_AttkSep4=(Fl_Input *)0;

static void cb_aSys_AttkSep4(Fl_Input* o, void*) {
  config.i_attackSeparation[3] = atoi(o->value());
}

Fl_Input *aSys_saveRounds=(Fl_Input *)0;

static void cb_aSys_saveRounds(Fl_Input* o, void*) {
  int i=atoi(o->value());
config.i_roundsSave = i;
if (config.flags.f_debug) {printf("Set to %d\n", i); };
}

Fl_Input *aSys_playerFilename=(Fl_Input *)0;

static void cb_aSys_playerFilename(Fl_Input* o, void*) {
  strncpy(config.c_partyFilename, o->value(), 29);
}

Fl_Input *aSys_monsterFilename=(Fl_Input *)0;

static void cb_aSys_monsterFilename(Fl_Input* o, void*) {
  strncpy(config.c_monstFilename, o->value(), 29);
}

Fl_Button *aSys_SaveAll=(Fl_Button *)0;

static void cb_aSys_SaveAll(Fl_Button*, void*) {
  saveAllData();
}

Fl_Button *aSys_LoadAll=(Fl_Button *)0;

static void cb_aSys_LoadAll(Fl_Button*, void*) {
  loadAllData();
}

Fl_Button *aSys_LoadMonster=(Fl_Button *)0;

static void cb_aSys_LoadMonster(Fl_Button*, void*) {
  loadMonsterFile();
}

Fl_Button *aSys_SaveMonster=(Fl_Button *)0;

static void cb_aSys_SaveMonster(Fl_Button*, void*) {
  saveMonsterFile();
}

Fl_Button *aSys_Reset4NewCombat=(Fl_Button *)0;

static void cb_aSys_Reset4NewCombat(Fl_Button*, void*) {
  doOtherAction(8);
}

Fl_Check_Browser *aSys_flags=(Fl_Check_Browser *)0;

static void cb_aSys_flags(Fl_Check_Browser*, void*) {
  setSystemFlag(1);
}

Fl_Button *aSys_LoadPlayer=(Fl_Button *)0;

static void cb_aSys_LoadPlayer(Fl_Button*, void*) {
  loadPlayerFile();
}

Fl_Button *aSys_Reset4NewDay=(Fl_Button *)0;

static void cb_aSys_Reset4NewDay(Fl_Button*, void*) {
  doOtherAction(11);
}

Fl_Input *aSys_Version=(Fl_Input *)0;

Fl_Input *aSys_mapFilename=(Fl_Input *)0;

static void cb_aSys_mapFilename(Fl_Input* o, void*) {
  strncpy(config.c_mapFilename, o->value(), 29);
}

Fl_Button *aSys_LoadMap=(Fl_Button *)0;

static void cb_aSys_LoadMap(Fl_Button*, void*) {
  doMapFileAction(0);
}

Fl_Button *aSys_SaveMap=(Fl_Button *)0;

static void cb_aSys_SaveMap(Fl_Button*, void*) {
  doMapFileAction(1);
}

Fl_Input *aSys_MapWidth=(Fl_Input *)0;

Fl_Input *aSys_MapHeight=(Fl_Input *)0;

Fl_Button *aSys_ClearMap=(Fl_Button *)0;

static void cb_aSys_ClearMap(Fl_Button*, void*) {
  doMapFileAction(2);
}

Fl_Button *aSys_ResizeMap=(Fl_Button *)0;

static void cb_aSys_ResizeMap(Fl_Button*, void*) {
  doMapFileAction(3);
}

Fl_Slider *aSys_ScreenWidth=(Fl_Slider *)0;

static void cb_aSys_ScreenWidth(Fl_Slider*, void*) {
  setScreenSize();
}

Fl_Slider *aSys_ScreenHeight=(Fl_Slider *)0;

static void cb_aSys_ScreenHeight(Fl_Slider*, void*) {
  setScreenSize();
}

Fl_Button *aSys_ResetTrigAdjustments=(Fl_Button *)0;

static void cb_aSys_ResetTrigAdjustments(Fl_Button*, void*) {
  doOtherAction(6);
doOtherAction(7);
doOtherAction(10);
}

Fl_Counter *aSys_MapColorFrom=(Fl_Counter *)0;

Fl_Counter *aSys_MapColorTo=(Fl_Counter *)0;

Fl_Button *aSys_DoMapColor=(Fl_Button *)0;

static void cb_aSys_DoMapColor(Fl_Button*, void*) {
  doMapFileAction(4);
}

Fl_Counter *aSys_DecRnds=(Fl_Counter *)0;

Fl_Button *aSys_DecRndAction=(Fl_Button *)0;

static void cb_aSys_DecRndAction(Fl_Button*, void*) {
  doRndsDecrement((int) aSys_DecRnds->value());
aSys_DecRnds->value(0);
}

Fl_Choice *aSys_diceSystem=(Fl_Choice *)0;

static void cb_aSys_diceSystem(Fl_Choice* o, void*) {
  doDiceSystem(o->value());
}

Fl_Choice *aSys_initSystem=(Fl_Choice *)0;

static void cb_aSys_initSystem(Fl_Choice* o, void*) {
  doDiceSystem(o->value()+20);
}

Fl_Button *aSys_BackupFiles=(Fl_Button *)0;

static void cb_aSys_BackupFiles(Fl_Button*, void*) {
  doOtherAction(13);
}

Fl_Tile *a_TNotes=(Fl_Tile *)0;

Fl_Text_Editor *a_NotesArea=(Fl_Text_Editor *)0;

Fl_Button *a_NotesLoad=(Fl_Button *)0;

static void cb_a_NotesLoad(Fl_Button*, void*) {
  extern Fl_Text_Buffer *notes_buffer;
notes_buffer->loadfile("notes.txt");
}

Fl_Button *a_NotesSave=(Fl_Button *)0;

static void cb_a_NotesSave(Fl_Button*, void*) {
  extern Fl_Text_Buffer *notes_buffer;
extern char systemDir[], mybuf2[];

sprintf(mybuf2, "%snotes.txt", systemDir);
// notes_buffer->savefile("notes.txt");
printf("NS: %s\n", mybuf2);
notes_buffer->savefile(mybuf2);
}

Fl_Tile *a_OTDiceRoller=(Fl_Tile *)0;

Fl_Browser *a_ODRList1=(Fl_Browser *)0;

Fl_Counter *a_ODRCount=(Fl_Counter *)0;

Fl_Button *a_ODRReroll=(Fl_Button *)0;

static void cb_a_ODRReroll(Fl_Button*, void*) {
  rollRNDDice();
}

Fl_Browser *a_ODRList2=(Fl_Browser *)0;

Fl_Browser *a_ODRList3=(Fl_Browser *)0;

Fl_Browser *a_ODRList4=(Fl_Browser *)0;

Fl_Browser *a_ODRList5=(Fl_Browser *)0;

Fl_Browser *a_ODRList6=(Fl_Browser *)0;

Fl_Browser *a_ODRList7=(Fl_Browser *)0;

Fl_Browser *a_ODRList8=(Fl_Browser *)0;

Fl_Group *a_SpellListGroup=(Fl_Group *)0;

Fl_Input *a_SLSpellSearch=(Fl_Input *)0;

static void cb_a_SLSpellSearch(Fl_Input*, void*) {
  showSRDspellEntries(1);
}

Fl_Browser *a_SLSpellSearchList=(Fl_Browser *)0;

static void cb_a_SLSpellSearchList(Fl_Browser*, void*) {
  selectSRDspellEntries(1);
}

Fl_Help_View *a_SLSpellSearchDetails=(Fl_Help_View *)0;

Fl_Tile *a_OTStatus=(Fl_Tile *)0;

Fl_Button *a_OStatusRefresh=(Fl_Button *)0;

static void cb_a_OStatusRefresh(Fl_Button*, void*) {
  doOtherAction(20);
}

Fl_Browser *a_OStatusList=(Fl_Browser *)0;

Fl_Tile *a_TSRD=(Fl_Tile *)0;

Fl_Help_View *a_SRDText=(Fl_Help_View *)0;

Fl_Button *a_SRDIndex=(Fl_Button *)0;

static void cb_a_SRDIndex(Fl_Button*, void*) {
  extern char systemDir[], mybuf2[];
extern int htmlLevel;

sprintf(mybuf2, "%s/srd/index.html", systemDir);
// a_SRDText->load("srd/index.html");
htmlLevel = -1;
a_SRDText->load(mybuf2);
}

Fl_Button *a_SRDPreviousPage=(Fl_Button *)0;

static void cb_a_SRDPreviousPage(Fl_Button*, void*) {
  extern char prevHtmlPage[5][256];
extern int htmlLevel;

if (prevHtmlPage[0][0] != '\0') {
//printf("hPP: %d %s\n", htmlLevel, &prevHtmlPage[htmlLevel][0]);
   a_SRDText->load(&prevHtmlPage[0][0]);
   htmlLevel--;
   if (htmlLevel < 0) { htmlLevel = 0; }
//printf("hPP: %d %s\n", htmlLevel, &prevHtmlPage[0][0]);
};
}

Fl_Tile *a_TQkHeal=(Fl_Tile *)0;

Fl_Group *g_QuickHeal=(Fl_Group *)0;

Fl_Button *a_qkheal_refresh=(Fl_Button *)0;

static void cb_a_qkheal_refresh(Fl_Button*, void*) {
  qkHealAction(0);
}

Fl_Button *a_qkheal_accept=(Fl_Button *)0;

static void cb_a_qkheal_accept(Fl_Button*, void*) {
  qkHealAction(1);
}

Fl_Input *a_qkheal_ln00=(Fl_Input *)0;

Fl_Input *a_qkheal_ln01=(Fl_Input *)0;

Fl_Input *a_qkheal_ln10=(Fl_Input *)0;

Fl_Input *a_qkheal_ln11=(Fl_Input *)0;

Fl_Input *a_qkheal_ln20=(Fl_Input *)0;

Fl_Input *a_qkheal_ln21=(Fl_Input *)0;

Fl_Input *a_qkheal_ln30=(Fl_Input *)0;

Fl_Input *a_qkheal_ln31=(Fl_Input *)0;

Fl_Input *a_qkheal_ln40=(Fl_Input *)0;

Fl_Input *a_qkheal_ln41=(Fl_Input *)0;

Fl_Input *a_qkheal_ln50=(Fl_Input *)0;

Fl_Input *a_qkheal_ln51=(Fl_Input *)0;

Fl_Input *a_qkheal_ln60=(Fl_Input *)0;

Fl_Input *a_qkheal_ln61=(Fl_Input *)0;

Fl_Input *a_qkheal_ln70=(Fl_Input *)0;

Fl_Input *a_qkheal_ln71=(Fl_Input *)0;

Fl_Input *a_qkheal_ln80=(Fl_Input *)0;

Fl_Input *a_qkheal_ln81=(Fl_Input *)0;

Fl_Input *a_qkheal_ln90=(Fl_Input *)0;

Fl_Input *a_qkheal_ln91=(Fl_Input *)0;

Fl_Input *a_qkheal_all=(Fl_Input *)0;

Fl_Group *aMisc_Enable=(Fl_Group *)0;

Fl_Check_Browser *a_OTDisableList=(Fl_Check_Browser *)0;

Fl_Button *a_OTDisableRefresh=(Fl_Button *)0;

static void cb_a_OTDisableRefresh(Fl_Button*, void*) {
  doDisableAction(-1);
}

Fl_Button *a_OTDisableAllPlayers=(Fl_Button *)0;

static void cb_a_OTDisableAllPlayers(Fl_Button*, void*) {
  extern ADMPsystem config;

int i;

for (i=a_OTDisableList->nitems(); i>=0; i--) {
   if (config.i_idList[ID_DISA][i] < MAX_PLAYERS && config.i_idList[ID_DISA][i] > -1) {
      a_OTDisableList->checked(i+1, 1);
   }
};
}

Fl_Button *a_OTDisableAllMonsters=(Fl_Button *)0;

static void cb_a_OTDisableAllMonsters(Fl_Button*, void*) {
  extern ADMPsystem config;

int i;

for (i=a_OTDisableList->nitems(); i>=0; i--) {
   if (config.i_idList[ID_DISA][i] >= MAX_PLAYERS && config.i_idList[ID_DISA][i] < MAX_MEMBERS) {
      a_OTDisableList->checked(i+1, 1);
   }
};
}

Fl_Button *a_OTDisableUnsetAll=(Fl_Button *)0;

static void cb_a_OTDisableUnsetAll(Fl_Button*, void*) {
  a_OTDisableList->check_none();
}

Fl_Check_Browser *a_OTDisableActionList=(Fl_Check_Browser *)0;

static void cb_a_OTDisableActionList(Fl_Check_Browser*, void*) {
  doDisableAction(0);
}

Fl_Button *a_OTDisableDoAction=(Fl_Button *)0;

static void cb_a_OTDisableDoAction(Fl_Button*, void*) {
  doDisableAction(1);
}

Fl_Group *aMisc_XPCalc=(Fl_Group *)0;

Fl_Input *a_OXPPartyLevel=(Fl_Input *)0;

Fl_Check_Button *a_OXPCalcIncAll=(Fl_Check_Button *)0;

Fl_Button *a_OXPCalcRefresh=(Fl_Button *)0;

static void cb_a_OXPCalcRefresh(Fl_Button*, void*) {
  doCalcXP();
}

Fl_Input *a_OXPValue=(Fl_Input *)0;

Fl_Button *a_OXPAdd=(Fl_Button *)0;

static void cb_a_OXPAdd(Fl_Button*, void*) {
  doAddPlayerXP();
}

Fl_Browser *a_OXPCalcList=(Fl_Browser *)0;

Fl_Button *aMisc_Reset4NewCombat=(Fl_Button *)0;

static void cb_aMisc_Reset4NewCombat(Fl_Button*, void*) {
  doOtherAction(8);
}

Fl_Button *aMisc_Reset4NewDay=(Fl_Button *)0;

static void cb_aMisc_Reset4NewDay(Fl_Button*, void*) {
  doOtherAction(11);
}

Fl_Button *aMisc_ResetTrigAdjustments=(Fl_Button *)0;

static void cb_aMisc_ResetTrigAdjustments(Fl_Button*, void*) {
  doOtherAction(6);
doOtherAction(7);
doOtherAction(10);
}

Fl_Counter *aMisc_DecRnds=(Fl_Counter *)0;

Fl_Button *aMisc_DecRndAction=(Fl_Button *)0;

static void cb_aMisc_DecRndAction(Fl_Button*, void*) {
  doRndsDecrement((int) aMisc_DecRnds->value());
aMisc_DecRnds->value(0);
}

Fl_Group *aMisc_SpecialActions=(Fl_Group *)0;

Fl_Browser *a_OOActionList=(Fl_Browser *)0;

static void cb_a_OOActionList(Fl_Browser* o, void*) {
  setOtherActionDescription(o->value()-1);
}

Fl_Button *a_OOtherAction=(Fl_Button *)0;

static void cb_a_OOtherAction(Fl_Button*, void*) {
  doOtherAction(a_OOActionList->value()-1);
}

Fl_Output *a_OOtherActionDescription=(Fl_Output *)0;

Fl_Tile *T_AlertName=(Fl_Tile *)0;

Fl_Group *ant_Grp1=(Fl_Group *)0;

Fl_Check_Browser *a_OTTriggerList=(Fl_Check_Browser *)0;

static void cb_a_OTTriggerList(Fl_Check_Browser*, void*) {
  doTriggerAction(0);
}

Fl_Input *a_OTTriggerRounds=(Fl_Input *)0;

Fl_Input *a_OTTriggerMessage=(Fl_Input *)0;

Fl_Check_Button *a_OTTriggerEveryRound=(Fl_Check_Button *)0;

Fl_Input *a_OTTriggerEvery=(Fl_Input *)0;

Fl_Button *a_OTTriggerAccept=(Fl_Button *)0;

static void cb_a_OTTriggerAccept(Fl_Button*, void*) {
  doTriggerAction(1);
}

Fl_Button *a_OTTriggerCancel=(Fl_Button *)0;

static void cb_a_OTTriggerCancel(Fl_Button*, void*) {
  doTriggerAction(2);
}

Fl_Group *ant_Grp2=(Fl_Group *)0;

Fl_Browser *aGN_NameList1=(Fl_Browser *)0;

Fl_Button *aGN_Refresh=(Fl_Button *)0;

static void cb_aGN_Refresh(Fl_Button*, void*) {
  generateRndNames();
}

Fl_Browser *aGN_NameList2=(Fl_Browser *)0;

Fl_Browser *aGN_NameList3=(Fl_Browser *)0;

Fl_Group *ant_Grp3=(Fl_Group *)0;

Fl_Counter *aRT_ELLevel=(Fl_Counter *)0;

Fl_Button *aRT_Generate=(Fl_Button *)0;

static void cb_aRT_Generate(Fl_Button*, void*) {
  generateRndTreasure();
}

Fl_Counter *aRT_ItemCount=(Fl_Counter *)0;

Fl_Choice *aRT_ItemType=(Fl_Choice *)0;

Fl_Button *aRT_ItemGenerate=(Fl_Button *)0;

static void cb_aRT_ItemGenerate(Fl_Button*, void*) {
  doMagicItemGeneration();
}

Fl_Text_Editor *aRT_Treasure=(Fl_Text_Editor *)0;

Fl_Text_Editor *aRT_ItemList=(Fl_Text_Editor *)0;

Fl_Group *ant_NPC=(Fl_Group *)0;

Fl_Choice *a_NPCClass=(Fl_Choice *)0;

Fl_Choice *a_NPCRace=(Fl_Choice *)0;

Fl_Choice *a_NPCAlignment=(Fl_Choice *)0;

Fl_Counter *a_NPCLevel=(Fl_Counter *)0;

Fl_Button *a_NPCGenerate=(Fl_Button *)0;

static void cb_a_NPCGenerate(Fl_Button*, void*) {
  npc_action(0);
}

Fl_Button *a_NPCSave=(Fl_Button *)0;

static void cb_a_NPCSave(Fl_Button*, void*) {
  npc_action(1);
}

Fl_Browser *a_NPCText=(Fl_Browser *)0;

Fl_Tile *t_SpellAdjustments=(Fl_Tile *)0;

Fl_Tabs *t_SpellAdjustmentsAll=(Fl_Tabs *)0;

Fl_Tile *t_SpellAdjustmentsSystem=(Fl_Tile *)0;

Fl_Check_Browser *a_OTAdjustList=(Fl_Check_Browser *)0;

static void cb_a_OTAdjustList(Fl_Check_Browser*, void*) {
  doAdjustmentAction(0);
}

Fl_Check_Browser *a_OTAdjustSystemList=(Fl_Check_Browser *)0;

static void cb_a_OTAdjustSystemList(Fl_Check_Browser*, void*) {
  doAdjustmentAction(-1);
}

Fl_Check_Browser *a_OTAdjustEffects=(Fl_Check_Browser *)0;

Fl_Button *a_OTAdjustAccept=(Fl_Button *)0;

static void cb_a_OTAdjustAccept(Fl_Button*, void*) {
  doAdjustmentAction(1);
}

Fl_Button *a_OTAdjustCancel=(Fl_Button *)0;

static void cb_a_OTAdjustCancel(Fl_Button*, void*) {
  doAdjustmentAction(2);
}

Fl_Input *a_OTAdjustRounds=(Fl_Input *)0;

Fl_Input *a_OTAdjustMessage=(Fl_Input *)0;

Fl_Button *a_OTAdjustSystemSave=(Fl_Button *)0;

static void cb_a_OTAdjustSystemSave(Fl_Button*, void*) {
  doAdjustmentAction(7);
}

Fl_Check_Browser *a_OTAdjustIDEnds=(Fl_Check_Browser *)0;

static void cb_a_OTAdjustIDEnds(Fl_Check_Browser*, void*) {
  doAdjustmentAction(8);
}

Fl_Button *a_OTAdjustDump=(Fl_Button *)0;

static void cb_a_OTAdjustDump(Fl_Button*, void*) {
  dumpAdjustments();
}

Fl_Counter *a_OTAdjustDecRnds=(Fl_Counter *)0;

Fl_Button *a_OTAdjustDecRndAction=(Fl_Button *)0;

static void cb_a_OTAdjustDecRndAction(Fl_Button*, void*) {
  doRndsDecrement((int) a_OTAdjustDecRnds->value());
a_OTAdjustDecRnds->value(0);
}

Fl_Button *a_OTAdjustPredef=(Fl_Button *)0;

static void cb_a_OTAdjustPredef(Fl_Button*, void*) {
  loadStdModifiers();
}

Fl_Group *a_OTAdjustGroup=(Fl_Group *)0;

Fl_Input *a_OTAdjustValue1=(Fl_Input *)0;

Fl_Choice *a_OTAdjustType1=(Fl_Choice *)0;

Fl_Choice *a_OTAdjustEffectsType1=(Fl_Choice *)0;

Fl_Input *a_OTAdjustValue2=(Fl_Input *)0;

Fl_Choice *a_OTAdjustType2=(Fl_Choice *)0;

Fl_Choice *a_OTAdjustEffectsType2=(Fl_Choice *)0;

Fl_Input *a_OTAdjustValue3=(Fl_Input *)0;

Fl_Choice *a_OTAdjustType3=(Fl_Choice *)0;

Fl_Choice *a_OTAdjustEffectsType3=(Fl_Choice *)0;

Fl_Input *a_OTAdjustValue4=(Fl_Input *)0;

Fl_Choice *a_OTAdjustType4=(Fl_Choice *)0;

Fl_Choice *a_OTAdjustEffectsType4=(Fl_Choice *)0;

Fl_Input *a_OTAdjustValue5=(Fl_Input *)0;

Fl_Choice *a_OTAdjustType5=(Fl_Choice *)0;

Fl_Choice *a_OTAdjustEffectsType5=(Fl_Choice *)0;

Fl_Tile *t_SpellAdjustmentsQuick=(Fl_Tile *)0;

Fl_Button *b_quickModsRefresh=(Fl_Button *)0;

static void cb_b_quickModsRefresh(Fl_Button*, void*) {
  doQuickMods(0,0,0);
}

Fl_Button *b_quickModsAccept=(Fl_Button *)0;

static void cb_b_quickModsAccept(Fl_Button*, void*) {
  doQuickMods(1,0,0);
}

Fl_Button *b_quickModsClear=(Fl_Button *)0;

static void cb_b_quickModsClear(Fl_Button*, void*) {
  doQuickMods(2,0,0);
}

int main(int argc, char **argv) {
  Fl_Double_Window* w;

Fl::set_font((Fl_Font)4, "helvetica");

  { Fl_Double_Window* o = a_Exit = new Fl_Double_Window(407, 97, "ADMP: Exit");
    w = o;
    { Fl_Button* o = a_EBExit = new Fl_Button(57, 60, 66, 25, "Yes, Exit");
      o->labelsize(ADMP_LABEL_SIZE);
    }
    { Fl_Button* o = a_EBCancel = new Fl_Button(141, 60, 66, 25, "Cancel");
      o->labelsize(ADMP_LABEL_SIZE);
    }
    { Fl_Button* o = a_EBSaveExit = new Fl_Button(235, 60, 90, 25, "Save && Exit");
      o->labelsize(ADMP_LABEL_SIZE);
    }
    { Fl_Input* o = a_EText = new Fl_Input(19, 8, 324, 33);
      o->box(FL_NO_BOX);
      o->selection_color((Fl_Color)26);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->textcolor(1);
      o->value("Are you sure you want to Exit ?");
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_Copyright = new Fl_Double_Window(405, 140, "ADMP - Copyright Display");
    w = o;
    { Fl_Button* o = a_CAccept = new Fl_Button(65, 105, 75, 25, "I Accept");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_CAccept);
    }
    { Fl_Button* o = a_CDontAccept = new Fl_Button(160, 105, 95, 25, "I Dont Accept");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_CDontAccept);
    }
    { Fl_Output* o = a_CMessage = new Fl_Output(10, 10, 380, 80);
      o->type(12);
      o->color((Fl_Color)17);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_HelpWindow = new Fl_Double_Window(900, 575, "ADMP - Help Display");
    w = o;
    { Fl_Browser* o = a_HelpList = new Fl_Browser(5, 5, 890, 520);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = a_HelpClose = new Fl_Button(430, 535, 85, 25, "Close");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_HelpClose);
    }
    o->set_modal();
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = a_WeaponWindow = new Fl_Double_Window(490, 300, "ADMP - Weapon Search");
    w = o;
    { Fl_Browser* o = a_WSearchList = new Fl_Browser(13, 14, 174, 273);
      o->tooltip("The list of weapons you can choose from");
      o->type(1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_a_WSearchList);
    }
    { Fl_Browser* o = a_WSearchDetails = new Fl_Browser(201, 169, 227, 126, "Weapon Details");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = a_WSAccept = new Fl_Button(248, 17, 72, 25, "Accept");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_WSAccept);
    }
    { Fl_Button* o = a_WSCancel = new Fl_Button(338, 17, 72, 25, "Cancel");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_WSCancel);
    }
    o->set_modal();
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = a_DetailsWindow = new Fl_Double_Window(400, 580, "Expanded Detail Area");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Browser* o = a_EDInitiatorDetails1 = new Fl_Browser(9, 17, 383, 86, "Initiator Details");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Text_Display* o = a_EDInitiatorDetails2 = new Fl_Text_Display(10, 121, 383, 162, "Notes");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Browser* o = a_EDDefenderDetails1 = new Fl_Browser(9, 306, 383, 86, "Defender Details");
      o->color((Fl_Color)3);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Text_Display* o = a_EDDefenderDetails2 = new Fl_Text_Display(10, 408, 383, 162, "Notes");
      o->color((Fl_Color)3);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->end();
  }
  { Fl_Double_Window* o = a_QkMonsterAdd = new Fl_Double_Window(725, 485, "Quick Monster Add");
    w = o;
    o->tooltip("How much damage of this type they ignore per round");
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Input* o = aQkAdd_Name = new Fl_Input(72, 24, 125, 25, "Name:");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_CRating = new Fl_Input(275, 24, 32, 25, "Chal Rating:");
      o->type(1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Counter* o = aQkAdd_Count = new Fl_Counter(385, 25, 35, 25, "How Many");
      o->type(1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->minimum(1);
      o->maximum(40);
      o->step(1);
      o->value(1);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Input* o = aQkAdd_Icon = new Fl_Input(465, 25, 165, 25, "Icon:");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = aQkAdd_MonstIconLoad = new Fl_Button(650, 25, 50, 25, "Load ...");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_aQkAdd_MonstIconLoad);
    }
    { Fl_Input* o = aQkAdd_HPMax = new Fl_Input(72, 54, 31, 25, "HP: Max:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_Regeneration = new Fl_Input(159, 54, 32, 25, "Regen:");
      o->tooltip("How much they regenerate each round");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ACNormal = new Fl_Input(72, 83, 31, 25, "AC: Norm:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ACTouch = new Fl_Input(159, 83, 31, 25, "Touch:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ACFlatFoot = new Fl_Input(277, 83, 31, 25, "FlatFooted:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_InitBonus = new Fl_Input(72, 113, 31, 25, "Init: Bonus");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_Speed = new Fl_Input(226, 113, 31, 25, "Speed:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ResistFire = new Fl_Input(405, 113, 31, 25, "Resistances: Fire:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ResistAcid = new Fl_Input(471, 112, 31, 25, "Acid:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ResistCold = new Fl_Input(538, 113, 31, 25, "Cold:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ResistElec = new Fl_Input(603, 113, 31, 25, "Elec:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_ResistSonic = new Fl_Input(674, 113, 31, 25, "Sonic:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_SaveFort = new Fl_Input(72, 142, 31, 25, "Save: Fort:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_SaveReflex = new Fl_Input(147, 142, 31, 25, "Ref:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_SaveWill = new Fl_Input(226, 142, 31, 25, "Will:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_NoAttacks = new Fl_Input(72, 171, 31, 25, "# Attks");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_SpellResistance = new Fl_Input(226, 171, 32, 25, "Spell Resistance:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_DamReductionHP = new Fl_Input(364, 171, 31, 25, "Dam Reduction:");
      o->tooltip("Damage amount they have to surpass");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = aQkAdd_DamReductionWeapon = new Fl_Input(405, 171, 31, 25, "/");
      o->tooltip("Or have a weapon with a plus better than this");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Choice* o = aQkAdd_DamReductionType = new Fl_Choice(475, 170, 80, 25, "Type:");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Browser* o = aQkAdd_WeaponSelector = new Fl_Browser(70, 206, 169, 160, "Weapon");
      o->type(1);
      o->color((Fl_Color)6);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_aQkAdd_WeaponSelector);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Input* o = aQkAdd_WeaponName = new Fl_Input(325, 210, 145, 25, "Name");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Button* o = aQkAdd_WeaponSearch = new Fl_Button(483, 210, 65, 25, "Search ...");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_aQkAdd_WeaponSearch);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponAttkBonus1 = new Fl_Input(325, 240, 29, 25, "Attk Bonuses");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponAttkBonus2 = new Fl_Input(357, 240, 29, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponAttkBonus3 = new Fl_Input(389, 240, 29, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponAttkBonus4 = new Fl_Input(421, 240, 29, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponDamage = new Fl_Input(325, 268, 93, 25, "Damage");
      o->tooltip("Up to 10 characters describing the damage ie. 1d8+3");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponCritical = new Fl_Input(325, 295, 78, 25, "Critical");
      o->tooltip("Up to 10 characters describing the critical ie. 19-20/*3");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponMagicBonus = new Fl_Input(325, 322, 29, 25, "Magic Bonus");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponRange = new Fl_Input(325, 349, 29, 25, "Range");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponReach = new Fl_Input(462, 377, 29, 25, "Reach");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponNoAttacks = new Fl_Input(325, 377, 29, 25, "# Attacks");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_WeaponSpecialMessage = new Fl_Input(325, 405, 190, 25, "Special Message");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Button* o = aQkAdd_Accept = new Fl_Button(195, 445, 91, 25, "Accept");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_aQkAdd_Accept);
    }
    { Fl_Button* o = aQkAdd_Cancel = new Fl_Button(295, 445, 91, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_aQkAdd_Cancel);
    }
    { Fl_Input* o = aQkAdd_WeaponFumble = new Fl_Input(590, 253, 29, 25, "Fumble");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Choice* o = aQkAdd_WeaponCritAdjustment = new Fl_Choice(590, 280, 60, 25, "Crit Adjust");
      o->down_box(FL_BORDER_BOX);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->when(FL_WHEN_RELEASE_ALWAYS);
      o->deactivate();
      o->add("None"); o->add("-1"); o->add("-2");
      o->add("Large"); o->add("Super Large");
    }
    { Fl_Choice* o = aQkAdd_WeaponSize = new Fl_Choice(590, 307, 75, 25, "Size");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->when(FL_WHEN_RELEASE_ALWAYS);
      o->add("Small");
      o->add("Medium");
    }
    { Fl_Input* o = aQkAdd_WeaponAttackTable = new Fl_Input(590, 335, 29, 25, "Attk Table");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_SavePoison = new Fl_Input(315, 142, 31, 25, "Poison:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_SaveDisease = new Fl_Input(410, 142, 31, 25, "Disease");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = aQkAdd_NoInGroup = new Fl_Input(385, 54, 31, 25, "No In Group:");
      o->tooltip("Used for mass combats");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_ActionWindow = new Fl_Double_Window(930, 600, "VCS d20 Combat Window");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    o->callback((Fl_Callback*)cb_a_ActionWindow);
    { Fl_Tabs* o = a_CTActions = new Fl_Tabs(7, 202, 923, 398);
      o->box(FL_DOWN_BOX);
      o->deactivate();
      { Fl_Tile* o = a_CTMelee = new Fl_Tile(7, 222, 919, 378, "Melee");
        o->labelsize(ADMP_LABEL_SIZE);
        { Fl_Input* o = a_CTMeleeAC = new Fl_Input(424, 274, 30, 25, "A/C");
          o->type(2);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeBAB = new Fl_Input(424, 305, 30, 25, "BAB");
          o->type(2);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeRoll = new Fl_Input(484, 305, 30, 25, "Roll");
          o->type(2);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_CTCalc1 = new Fl_Button(534, 305, 35, 25, "Calc");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTCalc1);
        }
        { Fl_Input* o = a_CTMeleeDamage = new Fl_Input(445, 369, 30, 25, "Damage");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeStun = new Fl_Input(530, 369, 30, 25, "Stunned");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeBleeding = new Fl_Input(445, 396, 30, 25, "Bleeding");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeInactive = new Fl_Input(530, 396, 30, 25, "Inactive");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Check_Browser* o = a_CTCombatMods = new Fl_Check_Browser(610, 389, 210, 203, "Combat Mods");
          o->type(3);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTCombatMods);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Browser* o = a_CTWeaponUsed = new Fl_Browser(231, 247, 158, 138, "Weapon to use");
          o->tooltip("Which weapon to use");
          o->type(1);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTWeaponUsed);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_CTDefender = new Fl_Browser(13, 247, 206, 335, "Defender/Receiver");
          o->tooltip("Who is defending against this attack");
          o->type(1);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTDefender);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Button* o = a_CTthisAttack = new Fl_Button(438, 237, 115, 25, "Accept this Attack");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTthisAttack);
        }
        { Fl_Button* o = a_CTallAttacksDone = new Fl_Button(583, 237, 115, 25, "All Attacks done");
          o->tooltip("Only select this once you\'ve ACCEPTED all the attacks to be done. This will \
not adjust the defenders details.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTallAttacksDone);
        }
        { Fl_Check_Browser* o = a_CTSpecialAttacks = new Fl_Check_Browser(665, 314, 155, 61, "Special Actions/Attacks");
          o->type(3);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpecialAttacks);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->add("Opp. Action"); o->add("Subdual Damage");
          o->add("Touch Attack"); o->add("Ranged Touch Attack");
          o->has_scrollbar(0);
        }
        { Fl_Browser* o = a_CTWeaponDetails = new Fl_Browser(231, 450, 199, 132, "Weapon Details");
          o->tooltip("This shows the details of the weapon selected");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Output* o = a_CTAttacksLeft = new Fl_Output(324, 399, 45, 35, "Attks Left");
          o->color((Fl_Color)252);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Output* o = a_CTACBreakdown = new Fl_Output(472, 274, 348, 25);
          o->color((Fl_Color)247);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeACAdjustments = new Fl_Input(530, 435, 30, 25, "A/C Mods");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeBABAdjustments = new Fl_Input(530, 461, 30, 25, "BAB Mods");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTMeleeDmgAdjustments = new Fl_Input(530, 487, 30, 25, "Damage Mods");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_CTRollD20 = new Fl_Button(582, 305, 35, 25, "d20");
          o->tooltip("Roll another D20");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTRollD20);
        }
        { Fl_Button* o = a_CTRollDamage = new Fl_Button(582, 335, 48, 25, "Hit \'em");
          o->tooltip("Roll damage on them as if they had been hit");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTRollDamage);
        }
        o->end();
      }
      { Fl_Tile* o = a_CTSpell = new Fl_Tile(7, 222, 918, 378, "Spell");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Check_Browser* o = a_CTSpellEffects = new Fl_Check_Browser(13, 247, 206, 335, "Whom it Effects");
          o->tooltip("Who is effected by the spell");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellEffects);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Counter* o = a_CTSpellLevel = new Fl_Counter(262, 267, 55, 20, "Spell Level");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(9);
          o->step(1);
          o->value(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellLevel);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Input* o = a_CTSpellDC = new Fl_Input(298, 298, 30, 25, "Spell DC");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTSpellMods = new Fl_Input(298, 325, 30, 25, "Spell Mods");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_CTSpellCalc = new Fl_Button(272, 359, 40, 25, "Calc");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellCalc);
        }
        { Fl_Input* o = a_CTSpellDamage = new Fl_Input(625, 281, 40, 25, "Damage");
          o->tooltip("This can either be a number or a dice setting ie. 2d4+4. If it is the later, \
it will roll that for each one effected.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTSpellStunned = new Fl_Input(725, 281, 30, 25, "Stunned");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTSpellBleeding = new Fl_Input(625, 309, 30, 25, "Bleeding");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTSpellInactive = new Fl_Input(725, 309, 30, 25, "Inactive");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTSpellDmgMods = new Fl_Input(725, 347, 30, 25, "Damage Mods");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_CTSpellSAP = new Fl_Button(230, 493, 115, 25, "Select All Players");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellSAP);
        }
        { Fl_Button* o = a_CTSpellSAM = new Fl_Button(230, 524, 115, 25, "Select All Monsters");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellSAM);
        }
        { Fl_Button* o = a_CTSpellUSA = new Fl_Button(230, 554, 115, 25, "UnSelect All");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellUSA);
        }
        { Fl_Button* o = a_CTSpellAllDone = new Fl_Button(693, 237, 100, 25, "All Spells Done");
          o->tooltip("Only select this once you\'ve ACCEPTED all the spell attacks to be done. This\
 will not adjust the defenders details.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellAllDone);
        }
        { Fl_Button* o = a_CTSpellAcceptThis = new Fl_Button(580, 237, 100, 25, "Accept this Spell");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellAcceptThis);
        }
        { Fl_Check_Browser* o = a_CTSpellModifiers = new Fl_Check_Browser(610, 401, 181, 150, "Spell Modifiers");
          o->tooltip("These apply to all SELECTED who did not save");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellModifiers);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->add("Save = 50%"); o->add("Save = Nothing");
          o->add("NO Save"); o->add("Spell Resistance Applies");
          o->add("Subtract from Slot Count");
        }
        { Fl_Check_Browser* o = a_CTSpellSaved = new Fl_Check_Browser(354, 247, 206, 335, "Who DID NOT save");
          o->tooltip("Who did not save against the spell");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Check_Browser* o = a_CTSpellEnergyType = new Fl_Check_Browser(232, 400, 110, 90, "Energy Type");
          o->tooltip("The spell energy type.");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellEnergyType);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->add("None/Ignore");
          o->add("Fire"); o->add("Acid"); o->add("Cold");
          o->add("Elecricity"); o->add("Sonic");
        }
        o->end();
      }
      { Fl_Tile* o = a_CTOther = new Fl_Tile(7, 222, 921, 378, "Other");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Check_Browser* o = a_CTOtherActions = new Fl_Check_Browser(13, 247, 206, 335, "Whom it Effects");
          o->tooltip("Who is effected by the action");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTOtherActions);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Button* o = a_CTAcceptOtherAction = new Fl_Button(492, 237, 90, 25, "Accept Action");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTAcceptOtherAction);
        }
        { Fl_Input* o = a_CTOtherHealHP = new Fl_Input(300, 264, 45, 25, "Heal HP");
          o->tooltip("This can either be a number or a dice setting ie. 2d4+4.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTOtherHealStun = new Fl_Input(300, 291, 30, 25, "Stunned");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTOtherHealBleeding = new Fl_Input(300, 318, 30, 25, "Bleeding");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTOtherHealInactive = new Fl_Input(300, 345, 30, 25, "Inactive");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Input* o = a_CTOtherHealSkillMods = new Fl_Input(300, 397, 30, 25, "Skill Mods");
          o->tooltip("This is the total of any adjustments that apply to skill checks");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTOtherMessages = new Fl_Browser(365, 321, 431, 259, "Messages");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Check_Browser* o = a_CTOtherFlags = new Fl_Check_Browser(229, 442, 125, 105, "Modifiers/Options");
          o->type(3);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          o->add("Stabilize");
          o->add("Remove from Spell Slot");
        }
        { Fl_Counter* o = a_CTOtherSpellLevel = new Fl_Counter(420, 265, 55, 20, "Spell Level");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(7);
          o->step(1);
          o->value(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        o->end();
      }
      { Fl_Tile* o = a_CTSpellDetails = new Fl_Tile(7, 225, 919, 375, "Spell Details");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        a_CTSpellHTMLDetails = new Fl_Help_View(210, 231, 716, 362);
        { Fl_Input* o = a_CTSpellDetailsSearch = new Fl_Input(78, 236, 67, 25, "Search");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellDetailsSearch);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Browser* o = a_CTSpellDetailsList = new Fl_Browser(19, 269, 186, 324);
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CTSpellDetailsList);
          o->type(2);
        }
        o->end();
      }
      { Fl_Tile* o = a_CTMonsterDetails = new Fl_Tile(7, 225, 918, 375, "Monster Details");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        a_CTMonsterHTMLDetails = new Fl_Help_View(16, 231, 779, 362);
        o->end();
      }
      { Fl_Tile* o = a_CTNotes = new Fl_Tile(12, 227, 916, 373, "Notes");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = a_CTNotesDetails = new Fl_Browser(25, 236, 881, 349);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        o->end();
      }
      { Fl_Tile* o = a_CTDiceRoller = new Fl_Tile(10, 225, 920, 375, "Dice Roller");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = a_CTDRList1 = new Fl_Browser(75, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList2 = new Fl_Browser(170, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList3 = new Fl_Browser(265, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList4 = new Fl_Browser(360, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList5 = new Fl_Browser(455, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList6 = new Fl_Browser(550, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList7 = new Fl_Browser(645, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = a_CTDRList8 = new Fl_Browser(740, 285, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_CTDRRefresh = new Fl_Button(420, 245, 80, 25, "Reroll Dice");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTDRRefresh);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Browser* o = a_CTMessage = new Fl_Browser(255, 5, 420, 190);
      o->tooltip("Any messages that you may need to action on");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
      o->has_scrollbar(0);
    }
    { Fl_Browser* o = a_CTDefenderDetails = new Fl_Browser(685, 105, 238, 70, "Defender Details");
      o->color((Fl_Color)3);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Browser* o = a_CTInitiatorDetails = new Fl_Browser(685, 18, 238, 70, "Initiator Details");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Browser* o = a_CBActionType = new Fl_Browser(10, 18, 160, 171, "Action Type");
      o->tooltip("Which action will they perform");
      o->type(1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_a_CBActionType);
      o->align(FL_ALIGN_TOP_LEFT);
      o->deactivate();
    }
    { Fl_Button* o = a_CTCancel = new Fl_Button(177, 5, 70, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_CTCancel);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_WExternalGridMap = new Fl_Double_Window(1040, 726, "VCS Player Grid Map");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    { gridMap* o = externalGridMap = new gridMap(4, 6, 1034, 713);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(ADMP_LABEL_SIZE);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      o->setGridType(1);
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Double_Window* o = a_notesWindow = new Fl_Double_Window(625, 200, "VCS Map Notes");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Input* o = a_NotesDescription = new Fl_Input(75, 21, 530, 30, "Description");
      o->color((Fl_Color)6);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = a_ObjectIcon = new Fl_Input(75, 65, 255, 30, "Icon");
      o->tooltip("If you select an ICON it will treat it as an object and show it on the player\
s map screen");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = a_ObjectIconSelect = new Fl_Button(339, 65, 65, 30, "Load ...");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_ObjectIconSelect);
    }
    { Fl_Input* o = a_ObjectWidth = new Fl_Input(75, 100, 35, 25, "Icon Size");
      o->tooltip("Icon Width");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = a_ObjectHeight = new Fl_Input(115, 100, 35, 25);
      o->tooltip("Icon Height");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = a_NotesAccept = new Fl_Button(143, 160, 64, 25, "Accept");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_NotesAccept);
    }
    { Fl_Button* o = a_NotesCancel = new Fl_Button(243, 160, 64, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_NotesCancel);
    }
    { Fl_Button* o = a_NotesDelete = new Fl_Button(343, 160, 64, 25, "Delete");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_NotesDelete);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_IconWindow = new Fl_Double_Window(990, 630);
    w = o;
    { Fl_Tabs* o = t_IconSelector = new Fl_Tabs(0, 0, 990, 590);
      { Fl_Tile* o = t_PlayerIcons = new Fl_Tile(0, 25, 990, 565, "Player");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Scroll* o = s_PlayerIcons = new Fl_Scroll(5, 35, 980, 545);
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = t_MonsterIcons = new Fl_Tile(0, 25, 990, 565, "Monster");
        o->labelsize(ADMP_LABEL_SIZE);
        o->when(FL_WHEN_RELEASE_ALWAYS);
        { Fl_Scroll* o = s_MonsterIcons = new Fl_Scroll(5, 35, 980, 545);
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = t_AnimalIcons = new Fl_Tile(0, 25, 990, 565, "Animals");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Scroll* o = s_AnimalIcons = new Fl_Scroll(5, 35, 980, 545);
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = t_ObjectIcons = new Fl_Tile(0, 25, 990, 565, "Objects");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Scroll* o = s_ObjectIcons = new Fl_Scroll(5, 35, 980, 545);
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = t_Other = new Fl_Tile(0, 25, 990, 565, "Other");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Scroll* o = s_OtherIcons = new Fl_Scroll(5, 35, 980, 545);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = b_ISCancel = new Fl_Button(475, 595, 65, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_b_ISCancel);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_addToNewGroup = new Fl_Double_Window(455, 285, "Add new monsters and add to a group");
    w = o;
    { Fl_Input* o = a_addNewName = new Fl_Input(100, 25, 260, 25, "Group Name:");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Check_Button* o = a_addNewDisabled = new Fl_Check_Button(100, 65, 25, 25, "Add them as Disabled");
      o->down_box(FL_DOWN_BOX);
      o->align(FL_ALIGN_RIGHT);
    }
    { Fl_Button* o = a_addNewAccept = new Fl_Button(130, 230, 75, 25, "Accept");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_addNewAccept);
    }
    { Fl_Button* o = a_addNewCancel = new Fl_Button(240, 230, 75, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_addNewCancel);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_MassCombatWindow = new Fl_Double_Window(790, 540, "Mass Combat");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Browser* o = a_MCAttackers = new Fl_Browser(5, 95, 210, 435);
      o->tooltip("Attackers list");
      o->type(1);
      o->color((Fl_Color)6);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_a_MCAttackers);
      o->align(FL_ALIGN_TOP_LEFT);
      o->type(2);
    }
    { Fl_Browser* o = a_MCDefenders = new Fl_Browser(220, 95, 210, 435);
      o->tooltip("Defenders list");
      o->type(1);
      o->color((Fl_Color)3);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_a_MCDefenders);
      o->align(FL_ALIGN_TOP_LEFT);
      o->type(2);
    }
    { Fl_Group* o = a_MCAttkGrp = new Fl_Group(5, 20, 210, 70, "Attackers");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)6);
      o->labelsize(ADMP_LABEL_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Input* o = a_MCAttkGroups = new Fl_Input(65, 25, 30, 25, "# Groups");
        o->tooltip("How many groups of attackers are there");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCAttkInGroups = new Fl_Input(165, 25, 30, 25, "# in Group");
        o->tooltip("How many attackers are there in each group");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCAttkBAB = new Fl_Input(65, 55, 30, 25, "BAB");
        o->tooltip("Attackers base attack bonus");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCAttkDamage = new Fl_Input(165, 55, 45, 25, "Damage");
        o->tooltip("Attackers damage ie. 1d6+2");
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      o->end();
    }
    { Fl_Group* o = a_MCDefdGrp = new Fl_Group(220, 20, 230, 70, "Defenders");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)3);
      o->labelsize(ADMP_LABEL_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Input* o = a_MCDefdInGroups = new Fl_Input(290, 25, 30, 25, "# in Group");
        o->tooltip("How many defenders are there in each group");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCDefdAC = new Fl_Input(290, 55, 30, 25, "AC");
        o->tooltip("Defender armor class");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCDied = new Fl_Input(370, 55, 30, 25, "#Died");
        o->tooltip("How many have died");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCCurrentHP = new Fl_Input(370, 25, 30, 25, "HP");
        o->tooltip("Current HP");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
      }
      { Fl_Input* o = a_MCMaxHP = new Fl_Input(410, 25, 30, 25, "/");
        o->tooltip("Max HP");
        o->type(2);
        o->labelsize(ADMP_LABEL_SIZE);
        o->textsize(ADMP_TEXT_SIZE);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Check_Button* o = a_MCShowTotals = new Fl_Check_Button(530, 65, 25, 25, "Show only totals");
      o->tooltip("Show only the total results");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Browser* o = a_MCResults = new Fl_Browser(438, 110, 345, 420, "Results");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = a_MCCalculate = new Fl_Button(480, 15, 75, 25, "Calculate");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_MCCalculate);
    }
    { Fl_Button* o = a_MCAccept = new Fl_Button(593, 15, 75, 25, "Accept");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_MCAccept);
    }
    { Fl_Button* o = a_MCAllDone = new Fl_Button(705, 15, 75, 25, "All Done");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_MCAllDone);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_d100CombatWindow = new Fl_Double_Window(915, 550, "VCS d100 Combat Window");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Browser* o = d1_ActionType = new Fl_Browser(10, 15, 125, 155, "Action Type");
      o->type(1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->callback((Fl_Callback*)cb_d1_ActionType);
      o->align(FL_ALIGN_TOP_LEFT);
      o->add("Melee Attack"); o->add("Spell Attack");
      o->add("Missile Attack"); o->add("Heal"); o->add("M & M");
      o->type(2);
    }
    { Fl_Browser* o = d1_ActionMessages = new Fl_Browser(217, 15, 573, 170);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = d1_CancelAction = new Fl_Button(145, 15, 60, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_d1_CancelAction);
    }
    { Fl_Tabs* o = d1_ActionTab = new Fl_Tabs(0, 200, 915, 350);
      o->labelsize(ADMP_LABEL_SIZE);
      { Fl_Tile* o = d1_ActionMeleeTab = new Fl_Tile(0, 225, 915, 325, "Melee");
        o->labelsize(ADMP_LABEL_SIZE);
        { Fl_Button* o = d1_CombatSpecAttk1 = new Fl_Button(690, 285, 45, 25, "Sp.Attk");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_d1_CombatSpecAttk1);
        }
        { Fl_Choice* o = d1_CombatDefenderArmor = new Fl_Choice(495, 260, 85, 25, "Defd Armor");
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_d1_CombatDefenderArmor);
        }
        { Fl_Output* o = d1_CombatAttacksLeft = new Fl_Output(305, 345, 45, 35, "Attks Left");
          o->color((Fl_Color)252);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = d1_CombatHitThem = new Fl_Button(820, 285, 50, 25, "Hit \'em");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_d1_CombatHitThem);
        }
        int scrn=0;
#include "ADMPd100Melee.h"
        o->end();
      }
      { Fl_Tile* o = d1_ActionSpellTab = new Fl_Tile(0, 225, 915, 325, "Spells");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        int scrn=1;
#include "ADMPd100Melee.h"
        o->end();
      }
      { Fl_Tile* o = d1_ActionMissileTab = new Fl_Tile(0, 225, 915, 325, "Missile");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        int scrn=2;
#include "ADMPd100Melee.h"
        o->end();
      }
      { Fl_Tile* o = d1_ActionHealTab = new Fl_Tile(0, 225, 915, 325, "Heal");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        int scrn=3;
#include "ADMPd100Melee.h"
        o->end();
      }
      { Fl_Tile* o = d1_ActionMoveTab = new Fl_Tile(0, 225, 915, 325, "M&&M");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Choice* o = d1_CombatMMDifficulty = new Fl_Choice(495, 360, 95, 25, "Difficulty");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->add("Easy"); o->add("Medium");
          o->add("V.Hard"); o->add("Folly");
        }
        int scrn=4;
#include "ADMPd100Melee.h"
#include "ADMPd100MeleeCB.h"
        o->end();
      }
      { Fl_Tile* o = d1_ActionSpellDetailsTab = new Fl_Tile(0, 225, 915, 325, "Spell Details");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Input* o = d1_SpellSearchName = new Fl_Input(90, 235, 105, 25, "Search");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_d1_SpellSearchName);
          o->when(3);
        }
        { Fl_Browser* o = d1_SpellSearchFound = new Fl_Browser(90, 265, 190, 270);
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_d1_SpellSearchFound);
        }
        { Fl_Browser* o = d1_SpellSearchDetails = new Fl_Browser(290, 265, 290, 270);
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        o->end();
      }
      { Fl_Tile* o = d1_ActionDiceRoller = new Fl_Tile(0, 225, 915, 325, "Dice Roller");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = d1_CTDRList1 = new Fl_Browser(85, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList2 = new Fl_Browser(180, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList3 = new Fl_Browser(275, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList4 = new Fl_Browser(370, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList5 = new Fl_Browser(465, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList6 = new Fl_Browser(560, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList7 = new Fl_Browser(655, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Browser* o = d1_CTDRList8 = new Fl_Browser(750, 295, 90, 220);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = d1_DRRefresh = new Fl_Button(430, 250, 80, 25, "Reroll Dice");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_d1_DRRefresh);
        }
        o->end();
      }
      o->end();
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = qkEdit_Window = new Fl_Double_Window(515, 295, "Quick Edit Window");
    w = o;
    o->color((Fl_Color)6);
    o->labelsize(ADMP_LABEL_SIZE);
    { Fl_Input* o = qkEdit_Name = new Fl_Input(65, 10, 235, 25, "Name");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_HPCurrent = new Fl_Input(65, 40, 31, 25, "HP: Cur");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_HPMax = new Fl_Input(140, 40, 31, 25, "Max");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_DBNormal = new Fl_Input(65, 70, 31, 25, "AC: Norm");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_ACTouch = new Fl_Input(140, 70, 31, 25, "Touch:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_ACFlatFoot = new Fl_Input(241, 70, 31, 25, "F/Footed:");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_NoInGroup = new Fl_Input(360, 70, 31, 25, "#In Group");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_SaveFort = new Fl_Input(65, 100, 31, 25, "Save: Fort:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_SaveReflex = new Fl_Input(140, 100, 31, 25, "Ref:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_SaveWill = new Fl_Input(220, 100, 31, 25, "Will:");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_SavePoison = new Fl_Input(296, 100, 31, 25, "Poison");
      o->tooltip("d100 RR for Poison");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = qkEdit_SaveDisease = new Fl_Input(380, 100, 31, 25, "Disease");
      o->tooltip("d100 RR for Disease");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = qkEdit_W1Id = new Fl_Input(4, 128, 20, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = qkEdit_W1Name = new Fl_Input(65, 130, 180, 25, "Weap");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1AB1 = new Fl_Input(84, 157, 30, 25, "AB");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1AB2 = new Fl_Input(119, 157, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1AB3 = new Fl_Input(154, 157, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1AB4 = new Fl_Input(189, 157, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1Damage = new Fl_Input(254, 157, 85, 25, "Dam");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W1Critical = new Fl_Input(369, 157, 80, 25, "Crit");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2Id = new Fl_Input(4, 187, 20, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
      o->deactivate();
    }
    { Fl_Input* o = qkEdit_W2Name = new Fl_Input(65, 187, 180, 25, "Weap");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2AB1 = new Fl_Input(84, 215, 30, 25, "AB");
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2AB2 = new Fl_Input(119, 215, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2AB3 = new Fl_Input(154, 215, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2AB4 = new Fl_Input(189, 215, 30, 25);
      o->type(2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2Damage = new Fl_Input(254, 215, 85, 25, "Dam");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_W2Critical = new Fl_Input(369, 215, 80, 25, "Crit");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_Space = new Fl_Input(65, 250, 31, 25, "Space");
      o->type(2);
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Input* o = qkEdit_Icon = new Fl_Input(140, 250, 235, 25, "Icon");
      o->labelsize(ADMP_LABEL_SIZE);
      o->textsize(ADMP_TEXT_SIZE);
    }
    { Fl_Button* o = qkEdit_IconLoad = new Fl_Button(385, 250, 55, 25, "Load ...");
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_qkEdit_IconLoad);
    }
    { Fl_Button* o = qkEdit_Accept = new Fl_Button(350, 10, 65, 25, "Accept");
      o->color((Fl_Color)2);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_qkEdit_Accept);
    }
    { Fl_Button* o = qkEdit_Cancel = new Fl_Button(440, 10, 65, 25, "Cancel");
      o->color((Fl_Color)1);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_qkEdit_Cancel);
    }
    o->set_modal();
    o->end();
  }
  { Fl_Double_Window* o = a_MainWindow = new Fl_Double_Window(1010, 700, "VCS Main Window - v2.00 by Torquil Gault, copyright 2005+");
    w = o;
    o->labelsize(ADMP_LABEL_SIZE);
    o->callback((Fl_Callback*)cb_a_MainWindow);
    { Fl_Tabs* o = a_TMain = new Fl_Tabs(0, 0, 1055, 725);
      o->labelsize(ADMP_LABEL_SIZE);
      o->callback((Fl_Callback*)cb_a_TMain);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Tile* o = a_TCombat = new Fl_Tile(0, 25, 1005, 675, "Combat");
        o->labelsize(ADMP_LABEL_SIZE);
        o->callback((Fl_Callback*)cb_a_TCombat);
        o->hide();
        { Fl_Browser* o = a_CBInitiators = new Fl_Browser(2, 40, 203, 360, "Action Initiator Sequence");
          o->type(1);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CBInitiators);
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Button* o = a_CTEndOfRound = new Fl_Button(212, 32, 90, 25, "End Of Round");
          o->tooltip("Do all the end of round actions. Shows any finished alerts or adjustments");
          o->color((Fl_Color)211);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTEndOfRound);
        }
        { Fl_Button* o = a_CTHelp = new Fl_Button(885, 32, 74, 25, "HELP");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CTHelp);
        }
        { Fl_Button* o = aCB_MoreDetails = new Fl_Button(966, 31, 38, 27, ">>");
          o->tooltip("Show more details about the Initiators and Defenders");
          o->callback((Fl_Callback*)cb_aCB_MoreDetails);
          o->deactivate();
        }
        { Fl_Browser* o = a_CombatMessages = new Fl_Browser(2, 600, 200, 92, "Combat/Map Messages");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP);
          for (int i=0; i<8; i++) { o->add(""); }
          o->has_scrollbar(Fl_Browser_::HORIZONTAL);
          o->has_scrollbar(0);
        }
        { Fl_Button* o = a_CombatZoomIn = new Fl_Button(312, 32, 46, 25, "Z++");
          o->tooltip("Zoom in on the DM map");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatZoomIn);
        }
        { Fl_Button* o = a_CombatZoomOut = new Fl_Button(367, 32, 46, 25, "Z--");
          o->tooltip("Zoom out on the DM map");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatZoomOut);
        }
        { Fl_Button* o = a_CombatXZoomIn = new Fl_Button(426, 32, 46, 25, "xZ++");
          o->tooltip("Zoom in on the external map");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatXZoomIn);
        }
        { Fl_Button* o = a_CombatXZoomOut = new Fl_Button(481, 32, 46, 25, "xZ--");
          o->tooltip("Zoom out on the external map");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatXZoomOut);
        }
        { Fl_Button* o = a_CombatEnableXWindow = new Fl_Button(540, 32, 58, 25, "Show Xm");
          o->tooltip("Enable/Disable External Player Grid Map");
          o->color((Fl_Color)5);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatEnableXWindow);
        }
        { Fl_Choice* o = a_CombatDrawMode = new Fl_Choice(95, 405, 106, 25, "Map Mode");
          o->tooltip("The map mode - select combat or drawing modes");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatDrawMode);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->add("Combat"); o->add("Freestyle"); o->add("Lines");
          o->add("Shapes"); o->add("10' Corridors"); o->add("20' Corridors");
          o->add("Copy Object");
          o->value(0);
        }
        { Fl_Group* o = a_CombatColorGroup = new Fl_Group(1, 433, 204, 59);
          o->box(FL_DOWN_BOX);
          o->color(FL_FOREGROUND_COLOR);
          o->labelsize(ADMP_LABEL_SIZE);
          o->end();
        }
        { Fl_Choice* o = a_CombatShapes = new Fl_Choice(96, 496, 106, 25, "Shapes");
          o->tooltip("Select a shape to place onto the map");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatShapes);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->deactivate();
          o->add("Circle"); o->add("Rectangle");
        }
        { Fl_Choice* o = a_CombatVisibility = new Fl_Choice(656, 33, 51, 25, "Visibility");
          o->tooltip("How far can the players see. If you select \'Fog of War\' it becomes very imp\
ortant");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatVisibility);
          o->add("30'"); o->add("60'");
          o->add("90'"); o->add("120'");
          o->add("200'");
          o->value(1);
        }
        { Fl_Choice* o = a_CombatLayer = new Fl_Choice(130, 555, 72, 25, "Layer");
          o->tooltip("Map Layer - to have tunnels or the like going under/over each other");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatLayer);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->deactivate();
          o->add("Layer 0"); o->add("Layer 1"); o->add("Both");
          o->value(0);
        }
        { Fl_Choice* o = a_CombatShapesFill = new Fl_Choice(25, 555, 66, 25, " Fill");
          o->tooltip("How to draw the shape, is it filled with the color selected or not");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatShapesFill);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->deactivate();
          o->add("Outline"); o->add("Fill");
          o->value(0);
        }
        { Fl_Choice* o = a_CombatSpecialAction = new Fl_Choice(773, 33, 99, 25, "Sp. Action");
          o->tooltip("Do a special action on the map");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatSpecialAction);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Counter* o = a_CombatShapeWidth = new Fl_Counter(60, 525, 35, 25, "Width");
          o->tooltip("The width of the space you\'re drawing. In the case of a circle it\'ll be its\
 radius");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(100);
          o->step(5);
          o->value(20);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatShapeWidth);
          o->align(FL_ALIGN_LEFT);
          o->deactivate();
        }
        { Fl_Counter* o = a_CombatShapeHeight = new Fl_Counter(140, 525, 35, 25, "Height");
          o->tooltip("The height of the space you\'re drawing.");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(100);
          o->step(5);
          o->value(20);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_CombatShapeHeight);
          o->align(FL_ALIGN_LEFT);
          o->deactivate();
        }
        { gridMap* o = combatGridMap = new gridMap(209, 64, 795, 631);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(ADMP_LABEL_SIZE);
          o->labelcolor(FL_BLACK);
          o->align(FL_ALIGN_TOP);
          o->when(FL_WHEN_RELEASE);
          o->setGridText(a_CombatMessages);
          o->setExternalGrid(externalGridMap);
          o->setGridTile(externalGridMap->getGridTile());
          o->setActionWindow(a_ActionWindow);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Tile* o = a_TInitiatives = new Fl_Tile(0, 25, 1002, 675, "Initiatives");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = a_IActions = new Fl_Browser(15, 50, 205, 145, "Select Action");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_IActions);
          o->align(FL_ALIGN_TOP_LEFT);
          o->add("New Combat/Initiatives");
          o->add("Show new Monsters/Refresh");
          o->add("Accept Initiatives");
          o->type(2);
        }
        { Fl_Group* o = a_IPlayers = new Fl_Group(15, 224, 175, 445, "Player Initiatives");
          o->box(FL_UP_BOX);
          o->color((Fl_Color)2);
          o->selection_color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          o->end();
        }
        { Fl_Group* o = a_IMonsters = new Fl_Group(200, 224, 798, 445, "Monster Initiatives");
          o->box(FL_UP_BOX);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = a_TGroup = new Fl_Tile(1, 25, 1004, 674, "Groups");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = a_GroupList = new Fl_Browser(10, 45, 220, 490);
          o->tooltip("A list of all the groups available");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_GroupList);
          o->type(2);
        }
        { Fl_Group* o = a_GroupGroup = new Fl_Group(241, 45, 654, 641);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->deactivate();
          { Fl_Input* o = a_GroupDescription = new Fl_Input(342, 64, 262, 25, "Description");
            o->tooltip("The title of the group");
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          { Fl_Check_Button* o = a_GroupActive = new Fl_Check_Button(342, 94, 64, 20, "Active");
            o->down_box(FL_DOWN_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Check_Browser* o = a_GroupMembers = new Fl_Check_Browser(342, 122, 263, 551, "Group Members");
            o->tooltip("Which are members of the group selected");
            o->type(3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Button* o = a_GroupAccept = new Fl_Button(717, 86, 64, 25, "Accept");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupAccept);
          }
          { Fl_Button* o = a_GroupCancel = new Fl_Button(717, 120, 64, 25, "Cancel");
            o->color((Fl_Color)1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupCancel);
          }
          { Fl_Button* o = a_GroupDisableAll = new Fl_Button(679, 205, 146, 25, "Disable all except these");
            o->tooltip("Disable all monsters except these in this group which are enabled");
            o->color((Fl_Color)3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupDisableAll);
          }
          { Fl_Button* o = a_GroupEnableAll = new Fl_Button(679, 238, 146, 25, "Enable all in this Group");
            o->tooltip("Enable all the monsters in this group");
            o->color((Fl_Color)3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupEnableAll);
          }
          { Fl_Button* o = a_GroupClear = new Fl_Button(687, 357, 130, 25, "Clear Group Details");
            o->tooltip("Clear all the group details");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupClear);
          }
          { Fl_Button* o = a_GroupDeleteAll = new Fl_Button(679, 271, 146, 25, "Delete all selected");
            o->tooltip("Delete all the selected monsters");
            o->color((Fl_Color)3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupDeleteAll);
          }
          { Fl_Button* o = a_GroupRemoveAll = new Fl_Button(679, 303, 146, 25, "Remove from Map");
            o->tooltip("Remove all selected from the MAP. Sometimes it becomes confused and you need \
to remove them from the map first before adding them");
            o->color((Fl_Color)3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupRemoveAll);
          }
          { Fl_Button* o = a_GroupDisableSelected = new Fl_Button(679, 171, 146, 25, "Disable all selected");
            o->tooltip("Disable all monsters selected");
            o->color((Fl_Color)3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupDisableSelected);
          }
          { Fl_Button* o = a_GroupSelectAll = new Fl_Button(687, 390, 130, 25, "Select All");
            o->tooltip("Select all as in the group");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_GroupSelectAll);
          }
          o->end();
        }
        { Fl_Button* o = a_GroupResetAll = new Fl_Button(40, 565, 146, 25, "Reset ALL Group Details");
          o->tooltip("Reset/clear all details on all groups");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_GroupResetAll);
        }
        o->end();
      }
      { Fl_Tile* o = a_TEdit = new Fl_Tile(0, 25, 1010, 675, "Edit/Add");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = aEdit_players = new Fl_Browser(8, 35, 202, 145);
          o->tooltip("The list of players");
          o->type(1);
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_players);
          o->add(" New Player");
        }
        { Fl_Browser* o = aEdit_monsters = new Fl_Browser(8, 200, 202, 490);
          o->tooltip("The list of monsters");
          o->type(1);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_monsters);
          o->add(" New Monster");
        }
        { Fl_Tabs* o = aEdt_Tabs = new Fl_Tabs(224, 78, 786, 342);
          o->labelsize(ADMP_LABEL_SIZE);
          o->deactivate();
          { Fl_Tile* o = aEdt_Main = new Fl_Tile(224, 103, 786, 317, "Main");
            o->color((Fl_Color)239);
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Input* o = aEdit_Name = new Fl_Input(292, 109, 125, 25, "Name:");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Choice* o = aEdit_Race = new Fl_Choice(456, 109, 66, 25, "Race:");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(races);
            }
            { Fl_Choice* o = aEdit_Alignment = new Fl_Choice(587, 109, 47, 25, "Alignment:");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(alignment);
            }
            { Fl_Choice* o = aEdit_Class1 = new Fl_Choice(292, 136, 74, 25, "Class:");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(classes);
            }
            { Fl_Choice* o = aEdit_Class2 = new Fl_Choice(373, 136, 74, 25);
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(classes);
            }
            { Fl_Choice* o = aEdit_Class3 = new Fl_Choice(455, 136, 74, 25);
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(classes);
            }
            { Fl_Choice* o = aEdit_Class4 = new Fl_Choice(537, 136, 74, 25);
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->menu(classes);
            }
            { Fl_Input* o = aEdit_Level1 = new Fl_Input(292, 163, 31, 25, "Level:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Level2 = new Fl_Input(373, 163, 31, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Level3 = new Fl_Input(455, 163, 31, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Level4 = new Fl_Input(537, 163, 31, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_HPMax = new Fl_Input(292, 190, 31, 25, "HP: Max:");
              o->tooltip("Max HP");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_HPCurrent = new Fl_Input(330, 190, 31, 25, "/");
              o->tooltip("Current HPs");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_NonLethal = new Fl_Input(480, 190, 31, 25, "Non-Lethal:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Inactive = new Fl_Input(569, 190, 31, 25, "Inactive:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Stun = new Fl_Input(641, 190, 31, 25, "Stun:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_TempHP = new Fl_Input(292, 217, 31, 25, "Temp HPs:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Bleeding = new Fl_Input(379, 217, 31, 25, "Bleeding");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Disabled = new Fl_Input(480, 217, 31, 25, "Disabled at");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Unconcious = new Fl_Input(569, 217, 31, 25, "Uncon at");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Regeneration = new Fl_Input(641, 217, 31, 25, "Regen");
              o->tooltip("How many HP\'s to regenerate at the end of the round");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_EnhHP = new Fl_Input(710, 217, 31, 25, "+Enh");
              o->tooltip("How many HP\'s gained from Enhancement Items. Used for Spell Adjustment calcu\
lations");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACNormal = new Fl_Input(292, 244, 31, 25, "AC: Norm:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACTouch = new Fl_Input(379, 244, 31, 25, "Touch:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACFlatFoot = new Fl_Input(480, 244, 31, 25, "FlatFooted:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_NegateCritical = new Fl_Input(710, 244, 31, 25, "Neg. Crit");
              o->tooltip("Percentage chance of negating a critical");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecDex = new Fl_Input(307, 272, 31, 25, "AC Split: Dex:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecSize = new Fl_Input(370, 272, 31, 25, "Size:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecDeflection = new Fl_Input(429, 272, 31, 25, "Defl");
              o->tooltip("Used in Spell Adjustment calculations if the type match");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecNatural = new Fl_Input(508, 272, 31, 25, "Natural:");
              o->tooltip("Used in Spell Adjustment calculations if the type match");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecArmor = new Fl_Input(580, 272, 31, 25, "Armor:");
              o->tooltip("Used in Spell Adjustment calculations if the type match");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecShield = new Fl_Input(645, 272, 31, 25, "Shld:");
              o->tooltip("Used in Spell Adjustment calculations if the type match");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACSecDodge = new Fl_Input(722, 272, 31, 25, "Dodge:");
              o->tooltip("Used in Spell Adjustment calculations if the type match");
              o->type(2);
              o->color((Fl_Color)212);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABMelee1 = new Fl_Input(307, 300, 31, 25, "BAB: Melee:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABMelee2 = new Fl_Input(344, 300, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABMelee3 = new Fl_Input(381, 300, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABRanged1 = new Fl_Input(472, 300, 31, 25, "Ranged:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABRanged2 = new Fl_Input(510, 300, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABRanged3 = new Fl_Input(547, 300, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABGrapple1 = new Fl_Input(307, 326, 31, 25, "Grapple:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABGrapple2 = new Fl_Input(344, 326, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BABGrapple3 = new Fl_Input(382, 326, 31, 25, "/");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_InitBonus = new Fl_Input(306, 355, 31, 25, "Init: Bonus");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_InitRoll = new Fl_Input(382, 355, 31, 25, "Roll:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Speed = new Fl_Input(461, 355, 31, 25, "Speed:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SaveFort = new Fl_Input(306, 385, 31, 25, "Save: Fort:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SaveReflex = new Fl_Input(382, 385, 31, 25, "Ref:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SaveWill = new Fl_Input(450, 385, 31, 25, "Will:");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_IconFilename = new Fl_Input(750, 385, 255, 25, "Icon:");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Button* o = aEdit_LoadIcon = new Fl_Button(665, 385, 50, 25, "Load ...");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aEdit_LoadIcon);
            }
            { Fl_Input* o = aEdit_MapX = new Fl_Input(900, 272, 31, 25, "Map Loc:");
              o->tooltip("Edit this with care. Set to -1 if it doesnt appear on the map correctly then \
add NEW monsters");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_MapY = new Fl_Input(938, 272, 31, 25, ":");
              o->tooltip("Edit this with care. Set to -1 if it doesnt appear on the map correctly then \
add NEW monsters");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Reach = new Fl_Input(815, 300, 31, 25, "Reach:");
              o->tooltip("The reach of the character in feet.");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Space = new Fl_Input(735, 300, 31, 25, "Space:");
              o->tooltip("The space taken up by the character in feet.");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_InGroup = new Fl_Input(938, 300, 30, 25, "In Group:");
              o->tooltip("Edit this with care.");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Check_Browser* o = aEdit_Flags = new Fl_Check_Browser(850, 120, 132, 140, "Flags/Options:");
              o->type(3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Input* o = aEdit_HitDice = new Fl_Input(710, 190, 100, 25, "HD:");
              o->tooltip("Hit Dice, can be used in HP calculations");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_Items = new Fl_Input(540, 355, 450, 25, "Items:");
              o->tooltip("Any special items they may be carrying");
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_ACNoParry = new Fl_Input(569, 245, 31, 25, "No Parry");
              o->tooltip("d100: No Parry");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_SavePoison = new Fl_Input(525, 385, 31, 25, "Poison");
              o->tooltip("d100 RR for Poison");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_SaveDisease = new Fl_Input(610, 385, 31, 25, "Disease");
              o->tooltip("d100 RR for Disease");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_RoundsDeathIn = new Fl_Input(710, 163, 31, 25, "Death in");
              o->tooltip("Rounds until death occurs");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_BaseSpells = new Fl_Input(740, 110, 31, 25, "Base Spells");
              o->tooltip("Base Spell Attack");
              o->type(2);
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_DirectedSpells = new Fl_Input(740, 136, 31, 25, "Dir. Spells");
              o->tooltip("Directed Spell Attack");
              o->type(2);
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Choice* o = aEdit_ArmorWorn = new Fl_Choice(820, 110, 25, 25, "Armor Worn");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->hide();
              o->add("None"); o->add("Soft Lthr");
              o->add("Rigid Lthr"); o->add("Chain");
              o->add("Plate");
            }
            { Fl_Choice* o = aEdit_ArmorLegWorn = new Fl_Choice(820, 135, 25, 25, "Leg");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->hide();
              o->add("None");
              o->add("Leather");
              o->add("Metal");
            }
            { Fl_Choice* o = aEdit_ArmorArmWorn = new Fl_Choice(820, 160, 25, 25, "Arm");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->hide();
              o->add("None");
              o->add("Leather");
              o->add("Metal");
            }
            { Fl_Choice* o = aEdit_ArmorHelmWorn = new Fl_Choice(820, 185, 25, 25, "Helm");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->hide();
              o->add("None");
              o->add("Leather");
              o->add("Metal");
            }
            { Fl_Input* o = aEdit_NoInGroup = new Fl_Input(938, 328, 31, 25, "#In Group");
              o->tooltip("Used for mass combats. How many in this group");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            o->end();
          }
          { Fl_Tile* o = aEdt_Weapons = new Fl_Tile(224, 103, 761, 317, "Weapons");
            o->color((Fl_Color)239);
            o->labelsize(ADMP_LABEL_SIZE);
            { Fl_Input* o = aEdit_NoAttacks = new Fl_Input(386, 115, 29, 25, "# Attks");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Browser* o = aEdit_WeaponSelector = new Fl_Browser(235, 156, 185, 160, "Weapon");
              o->type(1);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_aEdit_WeaponSelector);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Check_Button* o = aEdit_WeaponAvailable = new Fl_Check_Button(500, 140, 25, 20, "Available");
              o->down_box(FL_DOWN_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->align(FL_ALIGN_LEFT);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponName = new Fl_Input(503, 160, 202, 25, "Name");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Button* o = aEdit_WeaponSearch = new Fl_Button(715, 159, 65, 25, "Search ...");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aEdit_WeaponSearch);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponAttkBonus1 = new Fl_Input(503, 190, 29, 25, "Attk Bonuses");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponAttkBonus2 = new Fl_Input(535, 190, 29, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponAttkBonus3 = new Fl_Input(567, 190, 29, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponAttkBonus4 = new Fl_Input(599, 190, 29, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponDamage = new Fl_Input(503, 218, 93, 25, "Damage");
              o->tooltip("Up to 10 characters describing the damage ie. 1d8+3");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponCritical = new Fl_Input(503, 245, 78, 25, "Critical");
              o->tooltip("Up to 10 characters describing the critical ie. 19-20/*3");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponMagicBonus = new Fl_Input(503, 272, 29, 25, "Magic Bonus");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponRange = new Fl_Input(503, 299, 29, 25, "Range");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponReach = new Fl_Input(640, 327, 29, 25, "Reach");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponNoAttacks = new Fl_Input(503, 327, 29, 25, "# Attacks");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_WeaponSpecialMessage = new Fl_Input(503, 355, 212, 25, "Special Message");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Choice* o = aEdit_WeaponType = new Fl_Choice(640, 272, 75, 25, "Type");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->add("Melee");
              o->add("Ranged");
            }
            { Fl_Button* o = aEdit_WeaponClear = new Fl_Button(805, 160, 80, 25, "Clear Details");
              o->tooltip("Clears all the current weapon details");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aEdit_WeaponClear);
            }
            { Fl_Input* o = aEdit_WeaponFumble = new Fl_Input(805, 218, 29, 25, "Fumble");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Choice* o = aEdit_WeaponCritAdjustment = new Fl_Choice(805, 245, 60, 25, "Crit Adjust");
              o->down_box(FL_BORDER_BOX);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->deactivate();
              o->add("None"); o->add("-1"); o->add("-2");
              o->add("Large"); o->add("Super Large");
            }
            { Fl_Choice* o = aEdit_WeaponSize = new Fl_Choice(805, 272, 75, 25, "Size");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->add("Small");
              o->add("Medium");
              o->add("Large");
              o->add("Huge");
            }
            { Fl_Input* o = aEdit_WeaponAttackTable = new Fl_Input(805, 300, 29, 25, "Attk Table");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            o->end();
          }
          { Fl_Tile* o = aEdt_Other = new Fl_Tile(224, 103, 766, 317, "Other");
            o->color((Fl_Color)239);
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Input* o = aEdit_CRating = new Fl_Input(329, 114, 32, 25, "Chal Rating:");
              o->type(1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Choice* o = aEdit_Size = new Fl_Choice(399, 114, 56, 25, "Size:");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->add("");
              o->add("Tiny"); o->add("Small"); o->add("Medium");
              o->add("Large"); o->add("Huge"); o->add("Colossal");
              o->add("Gargantuan");
            }
            { Fl_Input* o = aEdit_XPCurr = new Fl_Input(527, 114, 55, 25, "XP: Curr:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_XPTemp = new Fl_Input(592, 114, 55, 25, "/");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d201 = new Fl_Input(329, 142, 25, 25, "d20 Rolls:");
              o->tooltip("Prerolled d20\'s. For special DM use");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d202 = new Fl_Input(358, 142, 25, 25);
              o->tooltip("Prerolled d20\'s. For special DM use");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d203 = new Fl_Input(387, 142, 25, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d204 = new Fl_Input(416, 142, 25, 25);
              o->tooltip("Prerolled d20\'s. For special DM use");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d205 = new Fl_Input(445, 142, 25, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d206 = new Fl_Input(474, 142, 25, 25);
              o->tooltip("Prerolled d20\'s. For special DM use");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_d207 = new Fl_Input(503, 142, 25, 25);
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC0 = new Fl_Input(329, 170, 25, 25, "Spell DC:");
              o->tooltip("The Spell DC for a Level 1 spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC1 = new Fl_Input(358, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 2 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC2 = new Fl_Input(387, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 3 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC3 = new Fl_Input(416, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 4 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC4 = new Fl_Input(445, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 5 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC5 = new Fl_Input(474, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 6 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC6 = new Fl_Input(503, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 7 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC7 = new Fl_Input(532, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 8 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellDC8 = new Fl_Input(561, 170, 25, 25);
              o->tooltip("The Spell DC for a Level 9 Spell");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellFailure = new Fl_Input(329, 197, 25, 25, "Spell: Failure %:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistance = new Fl_Input(446, 197, 25, 25, "Resistance:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsSTR0 = new Fl_Input(329, 227, 25, 25, "Stats: STR:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsSTR1 = new Fl_Input(360, 227, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsDEX0 = new Fl_Input(421, 227, 25, 25, "DEX:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsDEX1 = new Fl_Input(452, 227, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsCON0 = new Fl_Input(515, 226, 25, 25, "CON:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsCON1 = new Fl_Input(546, 226, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsINT0 = new Fl_Input(330, 254, 25, 25, "INT:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsINT1 = new Fl_Input(361, 254, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsWIS0 = new Fl_Input(422, 254, 25, 25, "WIS:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsWIS1 = new Fl_Input(453, 254, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsCHA0 = new Fl_Input(516, 254, 25, 25, "CHA:");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_StatsCHA1 = new Fl_Input(547, 254, 25, 25, "/");
              o->tooltip("These are for your information only. Changing these do not effect BAB etc");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_DamReductionHP = new Fl_Input(329, 282, 31, 25, "Dam Reduction:");
              o->tooltip("Damage amount they have to surpass");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_DamReductionWeapon = new Fl_Input(370, 282, 31, 25, "/");
              o->tooltip("Or have a weapon with a plus better than this");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Choice* o = aEdit_DamReductionType = new Fl_Choice(453, 282, 80, 25, "Type:");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillSearch = new Fl_Input(329, 309, 25, 25, "Skills: Search");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillSOH = new Fl_Input(390, 309, 25, 25, "SofH:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillSpot = new Fl_Input(449, 309, 25, 25, "Spot:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillOLocks = new Fl_Input(525, 309, 25, 25, "OLocks:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillMoveSilently = new Fl_Input(599, 309, 25, 25, "MoveS:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillConcentration = new Fl_Input(714, 309, 25, 25, "Concentration:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillListen = new Fl_Input(329, 336, 25, 25, "Listen:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SkillHide = new Fl_Input(389, 336, 25, 25, "Hide:");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax0 = new Fl_Input(329, 364, 25, 25, "Spell Slots: 0:");
              o->tooltip("The Max no. of spells they can cast for Level 0");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur0 = new Fl_Input(364, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 0");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax1 = new Fl_Input(405, 364, 25, 25, "1");
              o->tooltip("The Max no. of spells they can cast for Level 1");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur1 = new Fl_Input(440, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 1");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax2 = new Fl_Input(479, 364, 25, 25, "2");
              o->tooltip("The Max no. of spells they can cast for Level 2");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur2 = new Fl_Input(514, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 2");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax3 = new Fl_Input(553, 364, 25, 25, "3");
              o->tooltip("The Max no. of spells they can cast for Level 3");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur3 = new Fl_Input(588, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 3");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax4 = new Fl_Input(626, 364, 25, 25, "4");
              o->tooltip("The Max no. of spells they can cast for Level 4");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur4 = new Fl_Input(661, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 4");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax5 = new Fl_Input(702, 364, 25, 25, "5");
              o->tooltip("The Max no. of spells they can cast for Level 5");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur5 = new Fl_Input(737, 364, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 5");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax6 = new Fl_Input(329, 391, 25, 25, "6:");
              o->tooltip("The Max no. of spells they can cast for Level 6");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur6 = new Fl_Input(364, 391, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 6");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax7 = new Fl_Input(406, 391, 25, 25, "7");
              o->tooltip("The Max no. of spells they can cast for Level 7");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur7 = new Fl_Input(441, 391, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 7");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax8 = new Fl_Input(479, 391, 25, 25, "8");
              o->tooltip("The Max no. of spells they can cast for Level 8");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur8 = new Fl_Input(514, 391, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 8");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotMax9 = new Fl_Input(553, 391, 25, 25, "9");
              o->tooltip("The Max no. of spells they can cast for Level 9");
              o->type(2);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellSlotCur9 = new Fl_Input(588, 391, 25, 25, "/");
              o->tooltip("The Current no. of spells they can cast for Level 9");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceFire1 = new Fl_Input(670, 145, 25, 25, "Fire Resist:");
              o->tooltip("Resistance to Fire - how many HP per round they ignore");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceFire2 = new Fl_Input(710, 145, 25, 25, "/ ");
              o->tooltip("How much has been used this Round");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceAcid1 = new Fl_Input(670, 172, 25, 25, "Acid Resist:");
              o->tooltip("Resistance to Acid - how many HP per round they ignore");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceAcid2 = new Fl_Input(710, 172, 25, 25, "/ ");
              o->tooltip("How much has been used this Round");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceCold1 = new Fl_Input(670, 199, 25, 25, "Cold Resist:");
              o->tooltip("Resistance to Cold - how many HP per round they ignore");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceCold2 = new Fl_Input(710, 199, 25, 25, "/ ");
              o->tooltip("How much has been used this Round");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceElec1 = new Fl_Input(670, 226, 25, 25, "Elec Resist:");
              o->tooltip("Resistance to Elecricity- how many HP per round they ignore");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceElec2 = new Fl_Input(710, 226, 25, 25, "/ ");
              o->tooltip("How much has been used this Round");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceSonic1 = new Fl_Input(670, 253, 25, 25, "Sonic Resist:");
              o->tooltip("Resistance to Sonic- how many HP per round they ignore");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_SpellResistanceSonic2 = new Fl_Input(710, 253, 25, 25, "/ ");
              o->tooltip("How much has been used this Round");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = aEdit_RoundsSpellChg = new Fl_Input(885, 115, 31, 25, "Round: Spell Chg");
              o->tooltip("d100 Rounds spent Spell Charging");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = aEdit_RoundsMissileChg = new Fl_Input(885, 142, 31, 25, "Missile Loading");
              o->tooltip("d100 Rounds spent Missile Loading");
              o->type(2);
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            o->end();
          }
          { Fl_Tile* o = aEdit_TNotes = new Fl_Tile(224, 103, 784, 317, "Notes");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Text_Editor* o = aEdit_Notes = new Fl_Text_Editor(237, 121, 738, 274);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Button* o = aEdt_Accept = new Fl_Button(461, 37, 70, 25, "Accept");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdt_Accept);
          o->deactivate();
        }
        { Fl_Button* o = aEdt_Cancel = new Fl_Button(545, 37, 70, 25, "Cancel");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdt_Cancel);
          o->deactivate();
        }
        { Fl_Choice* o = aEdit_SpecialActions = new Fl_Choice(336, 37, 90, 25, "Special Actions:");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_SpecialActions);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->deactivate();
        }
        { Fl_Input* o = a_EdtQkMonstSearch = new Fl_Input(471, 445, 140, 25, "Qk Monst Search");
          o->tooltip("Type in the first part of the monsters name. Use -- to find empty slots to us\
e for your own monsters");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_EdtQkMonstSearch);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(3);
        }
        { Fl_Browser* o = a_EdtQkMonList = new Fl_Browser(225, 435, 232, 255);
          o->tooltip("This is the list of STANDARD monsters. Use the SEARCH field to find upto 100 \
specific monsters");
          o->type(1);
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_EdtQkMonList);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = a_EdtQkMonAddCtr = new Fl_Counter(471, 484, 45, 20, "# to Add");
          o->tooltip("How many of these monsters to add. Up to 40");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(1);
          o->maximum(40);
          o->step(1);
          o->value(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = aEdit_AddQkMonsters = new Fl_Button(496, 517, 75, 25, "Add them");
          o->tooltip("Add the standard monster to the list of active monsters");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_AddQkMonsters);
        }
        { Fl_Button* o = aEdit_EditQkMonsters = new Fl_Button(496, 552, 75, 25, "Edit them");
          o->tooltip("Edit the selected Standard Monster. Accept the changes when done.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_EditQkMonsters);
        }
        { Fl_Button* o = aEdit_QkMonstersWildSearch = new Fl_Button(637, 444, 115, 25, "Advanced Search");
          o->tooltip("Display any containing the search text");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_QkMonstersWildSearch);
        }
        { Fl_Counter* o = a_EdtQkMonCRSearch = new Fl_Counter(636, 518, 45, 20, "CR Only");
          o->tooltip("Only show monsters with this CR value. ZERO means all monsters.");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(30);
          o->step(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_a_EdtQkMonCRSearch);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = aEdit_Dump = new Fl_Button(945, 37, 50, 25, "Dump");
          o->tooltip("Dump a list of players and monsters to the screen (stdout) for a header (.h) \
file");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_Dump);
        }
        { Fl_Group* o = aEL_CalculatorGroup = new Fl_Group(795, 543, 200, 147, "EL Calculator");
          o->box(FL_DOWN_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Counter* o = aELC_ELLevel = new Fl_Counter(952, 551, 36, 25, "Enc. Level");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->minimum(0);
            o->maximum(20);
            o->step(1);
            o->value(1);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_aELC_ELLevel);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Browser* o = aELC_Results = new Fl_Browser(815, 580, 176, 102);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          o->end();
        }
        { Fl_Choice* o = a_EdtQkMonCREnvironment = new Fl_Choice(860, 444, 130, 25, "Environment:");
          o->tooltip("In what type of environment are the monsters found. Limits the search");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = aEdit_SaveQkMonsters = new Fl_Button(496, 587, 75, 25, "Save as Std");
          o->tooltip("Add the current monster being editted as a Standard Monster. If a Std Monster\
 is selected it\'ll update it instead");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_SaveQkMonsters);
        }
        { Fl_Button* o = aEdt_QkMonsterAdd = new Fl_Button(629, 37, 102, 25, "Qk Monster Add");
          o->tooltip("A quick way of adding monsters ... it just asks for the basic details");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdt_QkMonsterAdd);
        }
        { Fl_Input* o = a_EdtQkMonstIconFilename = new Fl_Input(540, 625, 175, 25, "Icon to use");
          o->tooltip("The icon to use for the monsters when you Add them");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_EdtQkMonstIconLoad = new Fl_Button(726, 625, 50, 25, "Load ...");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_EdtQkMonstIconLoad);
        }
        { Fl_Check_Button* o = aEdit_showEnabled = new Fl_Check_Button(75, 180, 25, 20, "Show only Enabled");
          o->tooltip("Show only monster that are enabled");
          o->down_box(FL_DOWN_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aEdit_showEnabled);
        }
        o->end();
      }
      { Fl_Tile* o = a_TOther = new Fl_Tile(0, 25, 1014, 680, "Other");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Tabs* o = a_OTabs = new Fl_Tabs(0, 40, 1010, 660);
          { Fl_Tile* o = a_OTAutoDamage = new Fl_Tile(5, 65, 990, 627, "Auto Damage");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Check_Browser* o = a_OTADList = new Fl_Check_Browser(30, 90, 150, 164, "Auto Damage List");
              o->tooltip("This shows all the available auto-damage items to use");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTADList);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Button* o = a_OTADAccept = new Fl_Button(361, 87, 60, 25, "Accept");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTADAccept);
            }
            { Fl_Button* o = a_OTADCancel = new Fl_Button(446, 87, 60, 25, "Cancel");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTADCancel);
            }
            { Fl_Check_Browser* o = a_OTADInitiateList = new Fl_Check_Browser(30, 279, 230, 401, "Who Initiates it");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTADInitiateList);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Check_Browser* o = a_OTADReceiveList = new Fl_Check_Browser(275, 279, 230, 401, "Who Receives it");
              o->type(3);
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Input* o = a_OTADDescription = new Fl_Input(610, 277, 154, 25, "Description:");
              o->tooltip("What to \'call\' this auto-damage");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = a_OTADDamage = new Fl_Input(610, 308, 262, 25, "Damage:");
              o->tooltip("This can either be a dice roll or a value. If you preroll them, separate then\
 with a SPACE");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = a_OTADRounds = new Fl_Input(610, 338, 38, 25, "Duration:");
              o->tooltip("How many rounds to last. If this follows someone\'s INITIATIVE, add 1 to this");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = a_OTADRoundsDone = new Fl_Input(610, 369, 38, 25, "Rounds Done:");
              o->tooltip("How many rounds done");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Check_Browser* o = a_OTADFlags = new Fl_Check_Browser(610, 400, 146, 67, "Flags/Options:");
              o->tooltip("Any special flags/options to apply to this auto-damage");
              o->type(3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTADFlags);
              o->align(FL_ALIGN_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->add("Do on their Initiative");
              o->add("Done this Round");
              o->add("Re-roll for each Recvr");
            }
            { Fl_Choice* o = a_OTADType = new Fl_Choice(610, 473, 87, 25, "Type:");
              o->tooltip("What type of damage this does");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
              o->add("HP Damage");
            }
            o->end();
          }
          { Fl_Tile* o = a_TMassSkillCheck = new Fl_Tile(4, 65, 991, 627, "Mass Skill Check");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Check_Browser* o = aMSC_DoingList = new Fl_Check_Browser(29, 137, 236, 543, "Who\'s doing the Check");
              o->type(3);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Button* o = aMSC_refresh = new Fl_Button(63, 81, 91, 25, "Refresh List");
              o->tooltip("Refresh the list of names. It will only show enabled creatures.");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aMSC_refresh);
            }
            { Fl_Button* o = aMSC_DisableAllPlayers = new Fl_Button(295, 353, 105, 25, "Set All Players");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aMSC_DisableAllPlayers);
            }
            { Fl_Button* o = aMSC_DisableAllMonsters = new Fl_Button(295, 388, 105, 25, "Set All Monsters");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aMSC_DisableAllMonsters);
            }
            { Fl_Button* o = aMSC_DisableUnsetAll = new Fl_Button(295, 420, 105, 25, "Unset All");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aMSC_DisableUnsetAll);
            }
            { Fl_Input* o = aMSC_DCValue = new Fl_Input(353, 231, 31, 25, "DC of Check");
              o->type(2);
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Choice* o = aMSC_flags = new Fl_Choice(353, 142, 135, 25, "Flags/Options");
              o->tooltip("If it uses all the pre-rolled d20 it will roll a random roll for you.");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->add(" ");
              o->add("Roll a d20");
              o->add("Use prerolled d20");
              o->value(0);
            }
            { Fl_Choice* o = aMSC_SkillList = new Fl_Choice(353, 188, 135, 25, "Skill Used");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->add("Search"); o->add("Slight of Hand"); o->add("Spot");
              o->add("Open Locks"); o->add("Move Silently"); o->add("Listen");
              o->add("Hide"); o->add("Concentration");
              o->value(0);
            }
            { Fl_Button* o = aMSC_Calculate = new Fl_Button(353, 275, 102, 25, "Do Skill Check");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aMSC_Calculate);
            }
            { Fl_Browser* o = aMSC_ResultList = new Fl_Browser(522, 137, 308, 495, "Skill Check Results (RED = failed)");
              o->tooltip("The result of the skill check. RED means they failed.");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Tile* o = a_TLogFile = new Fl_Tile(6, 65, 989, 627, "Log File");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Browser* o = aLF_Logfile = new Fl_Browser(14, 113, 806, 562);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Button* o = aFL_Refresh = new Fl_Button(336, 79, 68, 25, "Refresh");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_aFL_Refresh);
            }
            o->end();
          }
          { Fl_Tile* o = a_TQkIcon = new Fl_Tile(6, 65, 987, 625, "Qk Icon");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Button* o = a_qkIconRefresh = new Fl_Button(78, 80, 110, 25, "Refresh List");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_qkIconRefresh);
            }
            { Fl_Check_Browser* o = a_qkIconList = new Fl_Check_Browser(28, 119, 262, 556);
              o->tooltip("The list of available monsters to change");
              o->type(3);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Button* o = a_qkIconLoad = new Fl_Button(315, 127, 50, 25, "Load ...");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_qkIconLoad);
            }
            { Fl_Input* o = a_qkIconIcon = new Fl_Input(445, 127, 330, 25, "Icon to Use");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = a_qkIconSpace = new Fl_Input(445, 167, 35, 25, "Space");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = a_qkIconReach = new Fl_Input(445, 197, 35, 25, "Reach");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Button* o = a_qkIconDoit = new Fl_Button(445, 252, 60, 25, "Do it");
              o->tooltip("Make these changes to the selected Monsters");
              o->color((Fl_Color)1);
              o->callback((Fl_Callback*)cb_a_qkIconDoit);
            }
            o->end();
          }
          { Fl_Tile* o = T_massWeaponCopy = new Fl_Tile(5, 65, 1000, 630, "Mass Copy");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Check_Browser* o = mWC_FromList = new Fl_Check_Browser(190, 110, 235, 535, "Copy From");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_mWC_FromList);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Check_Browser* o = mWC_ToList = new Fl_Check_Browser(470, 110, 235, 535, "Copy To");
              o->type(3);
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Button* o = mWC_Refresh = new Fl_Button(40, 110, 115, 30, "Refresh Lists");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_mWC_Refresh);
            }
            { Fl_Button* o = mWC_WeaponCopy = new Fl_Button(740, 110, 115, 30, "Copy Weapons");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_mWC_WeaponCopy);
            }
            { Fl_Button* o = mWC_AllCopy = new Fl_Button(740, 155, 115, 30, "Copy All Details");
              o->tooltip("Except name, map location and icon");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_mWC_AllCopy);
            }
            o->end();
          }
          { Fl_Tile* o = t_QkSpelllists = new Fl_Tile(0, 65, 1000, 630, "Qk Spells");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Choice* o = qsl_castertype = new Fl_Choice(50, 85, 110, 25, "Type");
              o->down_box(FL_BORDER_BOX);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_qsl_castertype);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Counter* o = qsl_casterlevel = new Fl_Counter(215, 85, 45, 25, "Level");
              o->type(1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->minimum(1);
              o->maximum(20);
              o->step(1);
              o->value(1);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_qsl_casterlevel);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Input* o = qsl_spellsLevel1 = new Fl_Input(325, 85, 30, 25, "Spells:");
              o->tooltip("Number of spells available for Level 1");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel2 = new Fl_Input(360, 85, 30, 25);
              o->tooltip("Spells Level 2");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel3 = new Fl_Input(395, 85, 30, 25);
              o->tooltip("Spells Level 3");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel4 = new Fl_Input(430, 85, 30, 25);
              o->tooltip("Spells Level 4");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel5 = new Fl_Input(465, 85, 30, 25);
              o->tooltip("Spells Level 5");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel6 = new Fl_Input(500, 85, 30, 25);
              o->tooltip("Spells Level 6");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel7 = new Fl_Input(535, 85, 30, 25);
              o->tooltip("Spells Level 7");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel8 = new Fl_Input(570, 85, 30, 25);
              o->tooltip("Spells Level 8");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_spellsLevel9 = new Fl_Input(605, 85, 30, 25);
              o->tooltip("Spells Level 9");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            { Fl_Input* o = qsl_AttackRating = new Fl_Input(160, 126, 30, 25, "Attack Rating");
              o->tooltip("Percentage of Attack Spells");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->value("50");
            }
            { Fl_Input* o = qsl_DefenceRating = new Fl_Input(310, 126, 30, 25, "Defence Rating");
              o->tooltip("Percentage of Defensive Spells");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->value("50");
            }
            { Fl_Button* o = qsl_DoIt = new Fl_Button(400, 126, 70, 25, "Generate");
              o->tooltip("Generate a random spell list");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_qsl_DoIt);
            }
            { Fl_Input* o = qsl_spellLists = new Fl_Input(25, 161, 560, 523);
              o->type(4);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            o->end();
          }
          { Fl_Tile* o = t_HealMonsters = new Fl_Tile(0, 65, 1010, 635, "Heal Monsters");
            o->labelsize(ADMP_LABEL_SIZE);
            { Fl_Group* o = gHM_Monsters = new Fl_Group(20, 115, 970, 560);
              o->box(FL_DOWN_BOX);
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
              o->end();
            }
            { Fl_Button* o = bHM_Refresh = new Fl_Button(220, 80, 90, 25, "Refresh List");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_bHM_Refresh);
            }
            { Fl_Button* o = bHM_Accept = new Fl_Button(335, 80, 90, 25, "Accept");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_bHM_Accept);
            }
            { Fl_Input* o = iHM_allMonsters = new Fl_Input(530, 80, 35, 25, "Heal All");
              o->tooltip("Heal all of these monsters shown this amount of HPs");
              o->type(2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = a_TSystem = new Fl_Tile(0, 25, 1002, 675, "System");
        o->labelsize(ADMP_LABEL_SIZE);
        { Fl_Input* o = aSys_Rounds = new Fl_Input(105, 50, 33, 25, "# Round");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_Rounds);
          o->when(FL_WHEN_CHANGED);
          o->value("1");
        }
        { Fl_Choice* o = aSys_Bleeding = new Fl_Choice(105, 84, 87, 25, "Bleeding");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_Bleeding);
          o->add("On their INIT roll");
          o->add("At End of Round");
          o->value(0);
        }
        { Fl_Choice* o = aSys_XPAllocation = new Fl_Choice(105, 119, 87, 25, "XP Allocation");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_XPAllocation);
          o->deactivate();
          o->add("As a group");
          o->add("Individually");
          o->value(0);
        }
        { Fl_Choice* o = aSys_GroupInitiatives = new Fl_Choice(105, 154, 87, 25, "Group Initiatives");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_GroupInitiatives);
          o->deactivate();
          o->add("As a group");
          o->add("Individually");
          o->value(0);
        }
        { Fl_Choice* o = aSys_MultipleAttacks = new Fl_Choice(105, 186, 112, 25, "Multiple Attacks");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_MultipleAttacks);
          o->deactivate();
          o->add("Do ALL attacks on their roll");
          o->add("Separate them out");
          o->value(0);
        }
        { Fl_Input* o = aSys_AttkSep1 = new Fl_Input(105, 220, 36, 25, "Init Modifiers: 1st");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_AttkSep1);
          o->deactivate();
          o->value("0");
        }
        { Fl_Input* o = aSys_AttkSep2 = new Fl_Input(152, 220, 36, 25, "/");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_AttkSep2);
          o->deactivate();
          o->value("0");
        }
        { Fl_Input* o = aSys_AttkSep3 = new Fl_Input(198, 220, 36, 25, "/");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_AttkSep3);
          o->deactivate();
          o->value("0");
        }
        { Fl_Input* o = aSys_AttkSep4 = new Fl_Input(245, 220, 36, 25, "/");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_AttkSep4);
          o->deactivate();
          o->value("0");
        }
        { Fl_Input* o = aSys_saveRounds = new Fl_Input(400, 50, 33, 25, "Save Every #Rounds");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_saveRounds);
          o->when(FL_WHEN_CHANGED);
          o->value("1");
        }
        { Fl_Input* o = aSys_playerFilename = new Fl_Input(105, 302, 155, 25, "Player File");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_playerFilename);
          o->when(FL_WHEN_CHANGED);
          o->value("player.dat");
          strcpy(config.c_partyFilename, "player.dat");
        }
        { Fl_Input* o = aSys_monsterFilename = new Fl_Input(105, 334, 154, 25, "Monster File");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_monsterFilename);
          o->when(FL_WHEN_CHANGED);
          o->value("monst.dat");
          strcpy(config.c_monstFilename, "monst.dat");
        }
        { Fl_Button* o = aSys_SaveAll = new Fl_Button(464, 386, 66, 25, "Save All");
          o->tooltip("This will save all the player & monster data. It WILL NOT save any notes.");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_SaveAll);
        }
        { Fl_Button* o = aSys_LoadAll = new Fl_Button(541, 386, 66, 25, "Load All");
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_LoadAll);
        }
        { Fl_Button* o = aSys_LoadMonster = new Fl_Button(277, 334, 57, 25, "Load ...");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_LoadMonster);
        }
        { Fl_Button* o = aSys_SaveMonster = new Fl_Button(344, 334, 57, 25, "Save ...");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_SaveMonster);
        }
        { Fl_Button* o = aSys_Reset4NewCombat = new Fl_Button(451, 316, 170, 25, "Reset all for a new Combat");
          o->tooltip("This will reset the players and monsters to full health and remove any trigge\
rs, adjustments or auto-damages.");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_Reset4NewCombat);
        }
        { Fl_Check_Browser* o = aSys_flags = new Fl_Check_Browser(450, 85, 270, 165, "System Flags/Options");
          o->type(3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_flags);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
        }
        { Fl_Button* o = aSys_LoadPlayer = new Fl_Button(277, 302, 57, 26, "Load ...");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_LoadPlayer);
        }
        { Fl_Button* o = aSys_Reset4NewDay = new Fl_Button(451, 348, 170, 25, "Reset all for a new Day");
          o->tooltip("This will heal the players by LEVEL and reset their spell slots");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_Reset4NewDay);
        }
        { Fl_Input* o = aSys_Version = new Fl_Input(675, 50, 42, 25, "Version #");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->deactivate();
        }
        { Fl_Input* o = aSys_mapFilename = new Fl_Input(105, 365, 154, 25, "Map File");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_mapFilename);
          o->when(FL_WHEN_CHANGED);
          o->value("mymap.map");
          strcpy(config.c_mapFilename, "mymap.map");
        }
        { Fl_Button* o = aSys_LoadMap = new Fl_Button(277, 365, 57, 25, "Load ...");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_LoadMap);
        }
        { Fl_Button* o = aSys_SaveMap = new Fl_Button(344, 365, 57, 25, "Save ...");
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_SaveMap);
        }
        { Fl_Input* o = aSys_MapWidth = new Fl_Input(105, 403, 33, 25, "Map Size");
          o->tooltip("Map width");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->when(FL_WHEN_CHANGED);
          o->value("200");
        }
        { Fl_Input* o = aSys_MapHeight = new Fl_Input(155, 403, 33, 25, "x ");
          o->tooltip("Map height");
          o->type(2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->when(FL_WHEN_CHANGED);
          o->value("200");
        }
        { Fl_Button* o = aSys_ClearMap = new Fl_Button(277, 401, 57, 25, "New");
          o->tooltip("Make a new empty map");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_ClearMap);
        }
        { Fl_Button* o = aSys_ResizeMap = new Fl_Button(344, 400, 57, 25, "Resize");
          o->tooltip("Resize the existing map to a new size");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_ResizeMap);
        }
        { Fl_Slider* o = aSys_ScreenWidth = new Fl_Slider(105, 440, 157, 25, "Screen Width");
          o->tooltip("Width of the window");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(1010);
          o->maximum(1478);
          o->step(1);
          o->value(1010);
          o->callback((Fl_Callback*)cb_aSys_ScreenWidth);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Slider* o = aSys_ScreenHeight = new Fl_Slider(105, 470, 157, 25, "Screen Height");
          o->tooltip("Height of the window");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(700);
          o->maximum(1400);
          o->step(1);
          o->value(700);
          o->callback((Fl_Callback*)cb_aSys_ScreenHeight);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = aSys_ResetTrigAdjustments = new Fl_Button(451, 285, 170, 25, "Clear Adjustments and Alerts");
          o->tooltip("This will remove any alerts, adjustments or auto-damages.");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_ResetTrigAdjustments);
        }
        { Fl_Counter* o = aSys_MapColorFrom = new Fl_Counter(155, 508, 35, 25, "Swap Map Color: From ID:");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(15);
          o->step(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Counter* o = aSys_MapColorTo = new Fl_Counter(230, 508, 35, 25, "To ID:");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(15);
          o->step(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = aSys_DoMapColor = new Fl_Button(285, 508, 57, 25, "Swap");
          o->tooltip("Swap map colors. You would do this to change a solid into a transparent color\
 or visa versa.");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_DoMapColor);
        }
        { Fl_Counter* o = aSys_DecRnds = new Fl_Counter(140, 549, 56, 20, "Rnd Decrementor");
          o->tooltip("This will decrement the number of rounds left to adjustments, alerts etc");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(30);
          o->step(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = aSys_DecRndAction = new Fl_Button(225, 550, 64, 20, "Do it");
          o->tooltip("Decrement the adjustments etc by the number of rounds specified");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_DecRndAction);
        }
        { Fl_Choice* o = aSys_diceSystem = new Fl_Choice(105, 253, 105, 25, "Dice System");
          o->tooltip("What dice system to use");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_diceSystem);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->add("d20 v3.5");
          o->add("MERP d100");
          o->add("RMS d100");
          o->value(0);
        }
        { Fl_Choice* o = aSys_initSystem = new Fl_Choice(295, 255, 105, 25, "Init. System");
          o->tooltip("What dice system to use");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
          o->callback((Fl_Callback*)cb_aSys_initSystem);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->deactivate();
          o->add("Standard");
          o->add("d12, d8, d6");
          o->value(0);
        }
        { Fl_Button* o = aSys_BackupFiles = new Fl_Button(465, 440, 145, 35, "Backup Files");
          o->tooltip("Backs up all data files into a file called vcs-YYMMDD-HHMM.zip");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aSys_BackupFiles);
        }
        o->end();
      }
      { Fl_Tile* o = a_TNotes = new Fl_Tile(1, 25, 1002, 675, "Notes");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Text_Editor* o = a_NotesArea = new Fl_Text_Editor(10, 87, 983, 597);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textsize(ADMP_TEXT_SIZE);
        }
        { Fl_Button* o = a_NotesLoad = new Fl_Button(181, 45, 50, 25, "Load");
          o->tooltip("Load or Reload the notes");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_NotesLoad);
        }
        { Fl_Button* o = a_NotesSave = new Fl_Button(290, 45, 50, 25, "Save");
          o->tooltip("Save the notes to the notes.txt file");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_NotesSave);
        }
        o->end();
      }
      { Fl_Tile* o = a_OTDiceRoller = new Fl_Tile(0, 25, 1005, 675, "Dice Roller/Spells");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Browser* o = a_ODRList1 = new Fl_Browser(130, 47, 90, 268, "Dice Rolling Results");
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Counter* o = a_ODRCount = new Fl_Counter(55, 48, 50, 22, "# to Roll");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(1);
          o->maximum(20);
          o->step(1);
          o->value(20);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = a_ODRReroll = new Fl_Button(15, 85, 99, 25, "Reroll Dice");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_ODRReroll);
        }
        { Fl_Browser* o = a_ODRList2 = new Fl_Browser(225, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList3 = new Fl_Browser(320, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList4 = new Fl_Browser(415, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList5 = new Fl_Browser(511, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList6 = new Fl_Browser(607, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList7 = new Fl_Browser(703, 47, 90, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Browser* o = a_ODRList8 = new Fl_Browser(799, 47, 100, 268);
          o->tooltip("The results of the dice rolls. The values in brackets is the running total of\
 all the previous rolls.");
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Group* o = a_SpellListGroup = new Fl_Group(10, 325, 990, 365);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)6);
          { Fl_Input* o = a_SLSpellSearch = new Fl_Input(110, 335, 100, 25, "Search");
            o->tooltip("Search for spells starting with this");
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_a_SLSpellSearch);
            o->when(FL_WHEN_CHANGED);
          }
          { Fl_Browser* o = a_SLSpellSearchList = new Fl_Browser(25, 365, 186, 310);
            o->tooltip("The list of spells");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_a_SLSpellSearchList);
            o->type(2);
          }
          { Fl_Help_View* o = a_SLSpellSearchDetails = new Fl_Help_View(225, 340, 760, 335);
            o->labelsize(ADMP_LABEL_SIZE);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = a_OTStatus = new Fl_Tile(0, 25, 1000, 669, "Status");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Button* o = a_OStatusRefresh = new Fl_Button(111, 43, 93, 25, "Refresh");
          o->color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_OStatusRefresh);
        }
        { Fl_Browser* o = a_OStatusList = new Fl_Browser(20, 85, 963, 590);
          o->tooltip("This shows their total HPs and does include those from Adjustments etc");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->textfont(4);
          o->textsize(ADMP_TEXT_SIZE);
        }
        o->end();
      }
      { Fl_Tile* o = a_TSRD = new Fl_Tile(1, 25, 1004, 675, "SRD Text");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Help_View* o = a_SRDText = new Fl_Help_View(11, 79, 988, 609);
          o->labelsize(ADMP_LABEL_SIZE);
          o->link(&htmlLoadLink);
        }
        { Fl_Button* o = a_SRDIndex = new Fl_Button(270, 40, 118, 25, "Back to the Index");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_SRDIndex);
        }
        { Fl_Button* o = a_SRDPreviousPage = new Fl_Button(468, 40, 53, 25, "@<-");
          o->tooltip("Previous Page");
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_a_SRDPreviousPage);
        }
        o->end();
      }
      { Fl_Tile* o = a_TQkHeal = new Fl_Tile(0, 25, 1005, 700, "Qk Heal/XP/Enable");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Group* o = g_QuickHeal = new Fl_Group(10, 50, 290, 270, "Quick Heal");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Button* o = a_qkheal_refresh = new Fl_Button(25, 60, 96, 25, "Refresh Details");
            o->tooltip("Refresh the player details");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_qkheal_refresh);
          }
          { Fl_Button* o = a_qkheal_accept = new Fl_Button(138, 60, 76, 25, "Accept");
            o->tooltip("Heal the players");
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_qkheal_accept);
          }
          { Fl_Input* o = a_qkheal_ln00 = new Fl_Input(20, 95, 200, 20);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln01 = new Fl_Input(240, 95, 37, 20);
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln10 = new Fl_Input(20, 116, 200, 20);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln11 = new Fl_Input(240, 116, 37, 20);
            o->type(2);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln20 = new Fl_Input(20, 137, 200, 20);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln21 = new Fl_Input(240, 137, 37, 20);
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln30 = new Fl_Input(20, 158, 200, 20);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln31 = new Fl_Input(240, 158, 37, 20);
            o->type(2);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln40 = new Fl_Input(20, 179, 200, 20);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln41 = new Fl_Input(240, 179, 37, 20);
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln50 = new Fl_Input(20, 200, 200, 20);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln51 = new Fl_Input(240, 200, 37, 20);
            o->type(2);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln60 = new Fl_Input(20, 221, 200, 20);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln61 = new Fl_Input(240, 221, 37, 20);
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln70 = new Fl_Input(20, 242, 200, 20);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln71 = new Fl_Input(240, 242, 37, 20);
            o->type(2);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln80 = new Fl_Input(20, 263, 200, 20);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln81 = new Fl_Input(240, 263, 37, 20);
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_ln90 = new Fl_Input(20, 284, 200, 20);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_qkheal_ln91 = new Fl_Input(240, 284, 37, 20);
            o->type(2);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Input* o = a_qkheal_all = new Fl_Input(240, 60, 40, 25);
            o->tooltip("Heal all of these players this amount of HPs");
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          o->end();
        }
        { Fl_Group* o = aMisc_Enable = new Fl_Group(625, 50, 370, 632, "Enable/Disable/Hide etc");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Check_Browser* o = a_OTDisableList = new Fl_Check_Browser(640, 68, 210, 601, "Whom to effect");
            o->tooltip("This shows the list available to be disabled or enabled. You should REFRESH t\
his if you\'ve added monsters or players.");
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Button* o = a_OTDisableRefresh = new Fl_Button(876, 66, 80, 25, "Refresh List");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableRefresh);
          }
          { Fl_Button* o = a_OTDisableAllPlayers = new Fl_Button(870, 316, 105, 25, "Set All Players");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableAllPlayers);
          }
          { Fl_Button* o = a_OTDisableAllMonsters = new Fl_Button(870, 348, 105, 25, "Set All Monsters");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableAllMonsters);
          }
          { Fl_Button* o = a_OTDisableUnsetAll = new Fl_Button(870, 380, 105, 25, "Unset All");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableUnsetAll);
          }
          { Fl_Check_Browser* o = a_OTDisableActionList = new Fl_Check_Browser(860, 100, 125, 155);
            o->box(FL_DOWN_BOX);
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableActionList);
            o->when(FL_WHEN_CHANGED);
          }
          { Fl_Button* o = a_OTDisableDoAction = new Fl_Button(870, 265, 105, 25, "Do Action");
            o->tooltip("Do the above action");
            o->color((Fl_Color)1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTDisableDoAction);
          }
          o->end();
        }
        { Fl_Group* o = aMisc_XPCalc = new Fl_Group(10, 344, 290, 338, "XP Calc");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Input* o = a_OXPPartyLevel = new Fl_Input(90, 354, 35, 25, "Party Level");
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          { Fl_Check_Button* o = a_OXPCalcIncAll = new Fl_Check_Button(265, 354, 25, 25, "Include ALL monsters");
            o->tooltip("By selecting, you will include all monsters even those marked not to be shown\
 (see Dis/Enable tab).");
            o->down_box(FL_DOWN_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Button* o = a_OXPCalcRefresh = new Fl_Button(25, 389, 90, 25, "Calculate XP");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OXPCalcRefresh);
          }
          { Fl_Input* o = a_OXPValue = new Fl_Input(140, 389, 48, 25, "XP");
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->value("0");
          }
          { Fl_Button* o = a_OXPAdd = new Fl_Button(205, 389, 38, 25, "+ XP");
            o->tooltip("Add the XP value to Players XP total");
            o->color((Fl_Color)6);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OXPAdd);
          }
          { Fl_Browser* o = a_OXPCalcList = new Fl_Browser(20, 434, 270, 236);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          o->end();
        }
        { Fl_Button* o = aMisc_Reset4NewCombat = new Fl_Button(370, 78, 170, 25, "Reset all for a new Combat");
          o->tooltip("This will reset the players and monsters to full health and remove any trigge\
rs, adjustments or auto-damages.");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aMisc_Reset4NewCombat);
        }
        { Fl_Button* o = aMisc_Reset4NewDay = new Fl_Button(370, 110, 170, 25, "Reset all for a new Day");
          o->tooltip("This will heal the players by LEVEL and reset their spell slots");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aMisc_Reset4NewDay);
        }
        { Fl_Button* o = aMisc_ResetTrigAdjustments = new Fl_Button(370, 47, 170, 25, "Clear Adjustments and Alerts");
          o->tooltip("This will remove any alerts, adjustments or auto-damages.");
          o->color((Fl_Color)79);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aMisc_ResetTrigAdjustments);
        }
        { Fl_Counter* o = aMisc_DecRnds = new Fl_Counter(425, 150, 56, 23, "Rnd Decrementor");
          o->tooltip("This will decrement the number of rounds left to adjustments, alerts etc");
          o->type(1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->minimum(0);
          o->maximum(30);
          o->step(1);
          o->textsize(ADMP_TEXT_SIZE);
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Button* o = aMisc_DecRndAction = new Fl_Button(500, 150, 64, 25, "Do it");
          o->tooltip("Decrement the adjustments etc by the number of rounds specified");
          o->color((Fl_Color)1);
          o->labelsize(ADMP_LABEL_SIZE);
          o->callback((Fl_Callback*)cb_aMisc_DecRndAction);
        }
        { Fl_Group* o = aMisc_SpecialActions = new Fl_Group(310, 205, 305, 477, "Special Actions");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)3);
          o->labelsize(ADMP_LABEL_SIZE);
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Browser* o = a_OOActionList = new Fl_Browser(319, 230, 190, 265, "Select action");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_a_OOActionList);
            o->align(FL_ALIGN_TOP_LEFT);
            o->type(2);
          }
          { Fl_Button* o = a_OOtherAction = new Fl_Button(520, 340, 80, 25, "Do action");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OOtherAction);
          }
          { Fl_Output* o = a_OOtherActionDescription = new Fl_Output(318, 515, 290, 75, "What this action does");
            o->type(12);
            o->color((Fl_Color)25);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = T_AlertName = new Fl_Tile(0, 25, 1055, 700, "Alerts/Name/Treasure/NPC");
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Group* o = ant_Grp1 = new Fl_Group(5, 35, 510, 230);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)6);
          o->selection_color((Fl_Color)2);
          o->labelsize(ADMP_LABEL_SIZE);
          { Fl_Check_Browser* o = a_OTTriggerList = new Fl_Check_Browser(24, 62, 151, 182, "Alerts");
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->callback((Fl_Callback*)cb_a_OTTriggerList);
            o->align(FL_ALIGN_TOP_LEFT);
            o->when(FL_WHEN_RELEASE_ALWAYS);
          }
          { Fl_Input* o = a_OTTriggerRounds = new Fl_Input(235, 90, 32, 25, "Duration");
            o->type(2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->deactivate();
          }
          { Fl_Input* o = a_OTTriggerMessage = new Fl_Input(235, 122, 275, 25, "Message");
            o->tooltip("What does this alert pertain to");
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->deactivate();
          }
          { Fl_Check_Button* o = a_OTTriggerEveryRound = new Fl_Check_Button(294, 155, 25, 25, "Display every Rnd");
            o->tooltip("If marked, it will display the message every round");
            o->down_box(FL_DOWN_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->align(FL_ALIGN_LEFT);
            o->deactivate();
          }
          { Fl_Input* o = a_OTTriggerEvery = new Fl_Input(235, 185, 62, 25, "Every");
            o->tooltip("Show this message every X (or d?) rounds.");
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->deactivate();
          }
          { Fl_Button* o = a_OTTriggerAccept = new Fl_Button(300, 50, 79, 25, "Accept");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTTriggerAccept);
            o->deactivate();
          }
          { Fl_Button* o = a_OTTriggerCancel = new Fl_Button(399, 50, 79, 25, "Cancel");
            o->color((Fl_Color)1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_OTTriggerCancel);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = ant_Grp2 = new Fl_Group(525, 35, 480, 230);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          { Fl_Browser* o = aGN_NameList1 = new Fl_Browser(540, 100, 141, 150);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          { Fl_Button* o = aGN_Refresh = new Fl_Button(707, 55, 110, 25, "Generate Names");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_aGN_Refresh);
          }
          { Fl_Browser* o = aGN_NameList2 = new Fl_Browser(693, 100, 141, 150);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          { Fl_Browser* o = aGN_NameList3 = new Fl_Browser(849, 100, 141, 150);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          o->end();
        }
        { Fl_Group* o = ant_Grp3 = new Fl_Group(5, 275, 410, 420);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)6);
          o->labelsize(ADMP_LABEL_SIZE);
          { Fl_Counter* o = aRT_ELLevel = new Fl_Counter(90, 285, 60, 25, "EL Level");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->minimum(1);
            o->maximum(20);
            o->step(1);
            o->value(1);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Button* o = aRT_Generate = new Fl_Button(170, 285, 155, 25, "Generate Rnd Treasure");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_aRT_Generate);
          }
          { Fl_Counter* o = aRT_ItemCount = new Fl_Counter(45, 520, 60, 25, "#");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->minimum(0);
            o->maximum(10);
            o->step(1);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_RIGHT);
          }
          { Fl_Choice* o = aRT_ItemType = new Fl_Choice(145, 520, 100, 25, "Item");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->add("None"); o->add("Potion"); o->add("Wand"); o->add("Staff");
            o->add("Weapon"); o->add("Armour"); o->add("Rings");
            o->add("Scroll"); o->add("Wonderous");
          }
          { Fl_Button* o = aRT_ItemGenerate = new Fl_Button(270, 520, 100, 25, "Gen Magic Item");
            o->tooltip("Generate a specific type of magic item");
            o->color((Fl_Color)2);
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_aRT_ItemGenerate);
          }
          { Fl_Text_Editor* o = aRT_Treasure = new Fl_Text_Editor(15, 315, 390, 190);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          { Fl_Text_Editor* o = aRT_ItemList = new Fl_Text_Editor(15, 550, 390, 140);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
          }
          o->end();
        }
        { Fl_Group* o = ant_NPC = new Fl_Group(425, 275, 580, 420);
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)6);
          { Fl_Choice* o = a_NPCClass = new Fl_Choice(470, 285, 74, 25, "Class");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->menu(classes);
          }
          { Fl_Choice* o = a_NPCRace = new Fl_Choice(585, 285, 66, 25, "Race");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->menu(races);
          }
          { Fl_Choice* o = a_NPCAlignment = new Fl_Choice(680, 285, 47, 25, "AL");
            o->down_box(FL_BORDER_BOX);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textsize(ADMP_TEXT_SIZE);
            o->menu(alignment);
          }
          { Fl_Counter* o = a_NPCLevel = new Fl_Counter(760, 285, 40, 25, "Lvl");
            o->type(1);
            o->labelsize(ADMP_LABEL_SIZE);
            o->minimum(1);
            o->maximum(20);
            o->step(1);
            o->value(1);
            o->textsize(ADMP_TEXT_SIZE);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Button* o = a_NPCGenerate = new Fl_Button(815, 285, 75, 25, "Create NPC");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_NPCGenerate);
          }
          { Fl_Button* o = a_NPCSave = new Fl_Button(910, 285, 75, 25, "Save NPC");
            o->tooltip("This will save it as a monster, ready for use");
            o->labelsize(ADMP_LABEL_SIZE);
            o->callback((Fl_Callback*)cb_a_NPCSave);
            o->deactivate();
          }
          { Fl_Browser* o = a_NPCText = new Fl_Browser(435, 320, 555, 365);
            o->type(3);
            o->labelsize(ADMP_LABEL_SIZE);
            o->textfont(4);
            o->textsize(ADMP_TEXT_SIZE);
            //int w[] = {80,140,50,50,50, 0};
            //o->column_widths(w);
            //o->column_char(':');
          }
          o->end();
        }
        o->end();
      }
      { Fl_Tile* o = t_SpellAdjustments = new Fl_Tile(0, 30, 1005, 665, "Spell Adjustments");
        o->box(FL_DOWN_BOX);
        o->color((Fl_Color)6);
        o->labelsize(ADMP_LABEL_SIZE);
        o->hide();
        { Fl_Tabs* o = t_SpellAdjustmentsAll = new Fl_Tabs(5, 35, 1000, 660);
          { Fl_Tile* o = t_SpellAdjustmentsSystem = new Fl_Tile(5, 60, 1000, 635, "Complex/System Adjustments");
            o->labelsize(ADMP_LABEL_SIZE);
            { Fl_Check_Browser* o = a_OTAdjustList = new Fl_Check_Browser(25, 75, 222, 265, "Current Adjustments");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustList);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->type(2);
            }
            { Fl_Check_Browser* o = a_OTAdjustSystemList = new Fl_Check_Browser(25, 362, 222, 328, "Predefined System Adjustments");
              o->color((Fl_Color)111);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustSystemList);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Check_Browser* o = a_OTAdjustEffects = new Fl_Check_Browser(262, 74, 222, 482, "Whom it effects");
              o->tooltip("Who is effected by the adjustment");
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->deactivate();
            }
            { Fl_Button* o = a_OTAdjustAccept = new Fl_Button(570, 70, 72, 25, "Accept");
              o->tooltip("Save the adjustment");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustAccept);
              o->deactivate();
            }
            { Fl_Button* o = a_OTAdjustCancel = new Fl_Button(659, 70, 72, 25, "Cancel");
              o->tooltip("Cancel any changes to the adjustment");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustCancel);
              o->deactivate();
            }
            { Fl_Input* o = a_OTAdjustRounds = new Fl_Input(568, 325, 32, 25, "Duration");
              o->tooltip("How long will it last");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Input* o = a_OTAdjustMessage = new Fl_Input(568, 355, 256, 25, "Title");
              o->tooltip("The title of the adjustment");
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->deactivate();
            }
            { Fl_Button* o = a_OTAdjustSystemSave = new Fl_Button(280, 575, 119, 25, "Save as System");
              o->tooltip("Save the current adjustment as a pre-defined one");
              o->color((Fl_Color)6);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustSystemSave);
              o->deactivate();
            }
            { Fl_Check_Browser* o = a_OTAdjustIDEnds = new Fl_Check_Browser(515, 124, 200, 191, "Initiative to Follow/Caster");
              o->tooltip("If it is a spell that ends on someones INITIATIVE, select them. Add ONE to th\
e Round count as well.");
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->textsize(ADMP_TEXT_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustIDEnds);
              o->align(FL_ALIGN_TOP_LEFT);
              o->when(FL_WHEN_RELEASE_ALWAYS);
              o->deactivate();
            }
            { Fl_Button* o = a_OTAdjustDump = new Fl_Button(900, 75, 57, 25, "Dump");
              o->tooltip("Dump the current list of adjustments to the screen (stdout) for a header (.h)\
 file");
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustDump);
            }
            { Fl_Counter* o = a_OTAdjustDecRnds = new Fl_Counter(899, 125, 56, 20, "Rnd Decrementor");
              o->tooltip("This will decrement the number of rounds left to adjustments, alerts etc");
              o->type(1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->minimum(0);
              o->maximum(30);
              o->step(1);
              o->textsize(ADMP_TEXT_SIZE);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Button* o = a_OTAdjustDecRndAction = new Fl_Button(895, 155, 64, 25, "Do it");
              o->tooltip("Decrement the adjustments etc by the number of rounds specified");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustDecRndAction);
            }
            { Fl_Button* o = a_OTAdjustPredef = new Fl_Button(280, 610, 119, 25, "Reset Predefined");
              o->tooltip("This will reset the predefined adjustments to a certain standard");
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_a_OTAdjustPredef);
            }
            { Fl_Group* o = a_OTAdjustGroup = new Fl_Group(538, 400, 380, 195);
              o->box(FL_DOWN_BOX);
              o->color((Fl_Color)135);
              o->deactivate();
              { Fl_Input* o = a_OTAdjustValue1 = new Fl_Input(598, 430, 32, 25, "Value");
                o->tooltip("The value of this part of the adjustment");
                o->type(2);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustType1 = new Fl_Choice(648, 430, 110, 25, "What it Effects");
                o->tooltip("What will it effect");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustEffectsType1 = new Fl_Choice(778, 430, 110, 25, "Effects Type");
                o->tooltip("What type of adjustment is this ie. Bless is +1 BAB (Morale). Ones of the sam\
e type will not stack.");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Input* o = a_OTAdjustValue2 = new Fl_Input(598, 460, 32, 25, "Part 2");
                o->type(2);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
              }
              { Fl_Choice* o = a_OTAdjustType2 = new Fl_Choice(648, 460, 110, 25);
                o->tooltip("What will it effect");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustEffectsType2 = new Fl_Choice(778, 460, 110, 25);
                o->tooltip("What type of adjustment is this ie. Bless is +1 BAB (Morale). Ones of the sam\
e type will not stack.");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Input* o = a_OTAdjustValue3 = new Fl_Input(598, 490, 32, 25, "Part 3");
                o->type(2);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
              }
              { Fl_Choice* o = a_OTAdjustType3 = new Fl_Choice(648, 490, 110, 25);
                o->tooltip("What will it effect");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustEffectsType3 = new Fl_Choice(778, 490, 110, 25);
                o->tooltip("What type of adjustment is this ie. Bless is +1 BAB (Morale). Ones of the sam\
e type will not stack.");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Input* o = a_OTAdjustValue4 = new Fl_Input(598, 520, 32, 25, "Part 4");
                o->type(2);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
              }
              { Fl_Choice* o = a_OTAdjustType4 = new Fl_Choice(648, 520, 110, 25);
                o->tooltip("What will it effect");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustEffectsType4 = new Fl_Choice(778, 520, 110, 25);
                o->tooltip("What type of adjustment is this ie. Bless is +1 BAB (Morale). Ones of the sam\
e type will not stack.");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Input* o = a_OTAdjustValue5 = new Fl_Input(598, 550, 32, 25, "Part 5");
                o->type(2);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
              }
              { Fl_Choice* o = a_OTAdjustType5 = new Fl_Choice(648, 550, 110, 25);
                o->tooltip("What will it effect");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Choice* o = a_OTAdjustEffectsType5 = new Fl_Choice(778, 550, 110, 25);
                o->tooltip("What type of adjustment is this ie. Bless is +1 BAB (Morale). Ones of the sam\
e type will not stack.");
                o->down_box(FL_BORDER_BOX);
                o->labelsize(ADMP_LABEL_SIZE);
                o->textsize(ADMP_TEXT_SIZE);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              o->end();
            }
            o->end();
          }
          { Fl_Tile* o = t_SpellAdjustmentsQuick = new Fl_Tile(5, 60, 1000, 635, "Quick Adjustments");
            o->labelsize(ADMP_LABEL_SIZE);
            o->hide();
            { Fl_Button* o = b_quickModsRefresh = new Fl_Button(350, 66, 95, 25, "Refresh");
              o->color((Fl_Color)1);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_b_quickModsRefresh);
            }
            { Fl_Button* o = b_quickModsAccept = new Fl_Button(465, 66, 95, 25, "Accept");
              o->color((Fl_Color)2);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_b_quickModsAccept);
            }
            { Fl_Button* o = b_quickModsClear = new Fl_Button(580, 66, 95, 25, "Clear");
              o->color((Fl_Color)3);
              o->labelsize(ADMP_LABEL_SIZE);
              o->callback((Fl_Callback*)cb_b_quickModsClear);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
  w->show(argc, argv); initialiseSystem(argc, argv);
  return Fl::run();
}
